{"version":3,"file":"js/209.ff716d2c06f71aaf5632.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/useChrome/useChrome.js","webpack:///./src/Navigation.ts","webpack:///./src/Utils/plugins.ts","webpack:///./node_modules/@babel/runtime/helpers/esm/defineProperty.js"],"sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useScalprum } from '@scalprum/react-core';\n\nvar useChrome = function useChrome(selector) {\n  var _state$api;\n\n  var state = useScalprum();\n  var chrome = ((_state$api = state.api) === null || _state$api === void 0 ? void 0 : _state$api.chrome) || {};\n  chrome = _objectSpread(_objectSpread({}, chrome), {}, {\n    initialized: state.initialized\n  });\n\n  if (typeof selector === 'function') {\n    return selector(chrome);\n  }\n\n  return chrome;\n};\n\nexport default useChrome;","import * as React from 'react';\nimport { getActivePlugins } from './Utils/plugins';\nimport { HrefNavItem, NavSection } from '@console/dynamic-plugin-sdk/src';\nimport { EnabledPlugin } from '@console/mount/src/components/plugins/IncludePlugins';\nimport { Extension } from '@console/dynamic-plugin-sdk/src/types';\nimport { ConsolePluginManifestJSON } from '@console/dynamic-plugin-sdk/src/schema/plugin-manifest';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport packageInfo from '../package.json';\n\nexport interface RouteProps {\n  isHidden?: boolean;\n  appId?: string;\n  href?: string;\n  title?: string;\n}\n\nexport interface DynamicNav {\n  dynamicNav: string;\n  currentNamespace: string;\n  base?: string;\n  isBeta?: () => boolean;\n}\n\nconst navExtensionTypes = ['console.navigation/href', 'console.navigation/section'];\ntype NavExtension = HrefNavItem | NavSection;\n\nexport type GetAllExtensions = (base?: string, isBeta?: () => boolean) => Promise<NavExtension[]>;\nexport type CalculateRoutes = (navIdentifier: [string, string], currentNamespace: string, extensions: (HrefNavItem | NavSection)[]) => RouteProps[];\nexport type Navigation = {\n  expandable: boolean;\n  title: string;\n  routes: RouteProps[];\n};\n\nconst isFulfilledPromise = (result: PromiseSettledResult<Extension[]>): result is PromiseFulfilledResult<Extension[]> => {\n  return result.status === 'fulfilled' && Boolean(result.value);\n};\n\nconst isNavItem = (extension: Extension): extension is NavExtension => {\n  return navExtensionTypes.includes(extension.type);\n};\n\nconst getAllExtensions: GetAllExtensions = async (base = '', isBeta = () => false) => {\n  const plugins = await getActivePlugins(isBeta(), packageInfo.insights.appname);\n  const results: PromiseSettledResult<Extension[]>[] = await Promise.allSettled(\n    plugins.flatMap(async ({ name: pluginName, pathPrefix = '/api/plugins' }: EnabledPlugin) => {\n      const url = `${base}${pathPrefix}/${pluginName}/plugin-manifest.json`;\n      const response: Response = await fetch(url);\n      if (response.status !== 200) {\n        const msg = `${url} - ${response.status} - ${response.statusText}`;\n        // eslint-disable-next-line no-console\n        console.error(msg);\n        throw new Error(msg);\n      }\n      const manifest: ConsolePluginManifestJSON = await response.json();\n      return manifest.extensions;\n    }),\n  );\n\n  return results\n    .filter(isFulfilledPromise)\n    .map(({ value }) => value)\n    .flat()\n    .filter(isNavItem);\n};\n\nconst calculateRoutes: CalculateRoutes = ([appId, navSection], currentNamespace, extensions) => {\n  return extensions\n    .filter(({ type, properties }: HrefNavItem) => type.includes('console.navigation/href') && properties.section === navSection)\n    .map((extension: HrefNavItem) => ({\n      appId,\n      href: `/${currentNamespace}${navSection ? `/${navSection}` : ''}${extension.properties.href}`,\n      title: extension.properties.name,\n    }));\n};\n\nconst calculateNavigation = async ({ dynamicNav, currentNamespace, base, isBeta }: DynamicNav): Promise<Navigation | RouteProps[]> => {\n  const [appId, navSection] = dynamicNav.split('/');\n  let allExtensions: NavExtension[] = [];\n  let routes: RouteProps | RouteProps[];\n  try {\n    allExtensions = await getAllExtensions(base, isBeta);\n    routes = calculateRoutes([appId, navSection], currentNamespace, allExtensions);\n    if (routes.length === 0) {\n      routes = [{ isHidden: true }];\n    }\n  } catch (e) {\n    routes = [{ isHidden: true }];\n    // eslint-disable-next-line no-console\n    console.error('Problem fetching extensions', e);\n  }\n  const { properties: currSection } =\n    allExtensions.find(({ type, properties }: NavSection) => type === 'console.navigation/section' && properties.id === navSection) || {};\n  return currSection\n    ? {\n        expandable: true,\n        title: currSection.name,\n        routes,\n      }\n    : routes;\n};\n\n/**\n * Hook to be used by chrome to calculate navigation chunks.\n * @param { dynamicNav, currentNamespace }\n *  * dynamicNav - entry idicating dynamic navigation\n *  * currentNamespace - current app namespace\n * @returns either navigation object for nested items or array of navigation object for multiple entries.\n */\nexport const useNavigation = ({ dynamicNav, currentNamespace }: DynamicNav): Navigation | RouteProps[] => {\n  const [navigation, setNavigation] = React.useState<Navigation | RouteProps[]>();\n  const unmounted = React.useRef<boolean>(false);\n  const { isBeta } = useChrome();\n  React.useEffect(() => {\n    if (dynamicNav) {\n      // this is just one off for now, but we can start building on this\n      calculateNavigation({ dynamicNav, currentNamespace, base: isBeta() ? `/beta` : '', isBeta }).then((data: Navigation | RouteProps[]) => {\n        if (!unmounted.current) {\n          setNavigation(data);\n        }\n      });\n    }\n\n    return () => {\n      unmounted.current = true;\n    };\n  }, [dynamicNav, currentNamespace]);\n\n  return navigation;\n};\n\nexport default calculateNavigation;\n","export type PluginType = {\n  name: string;\n  pathPrefix?: string;\n};\n\ntype GetActivePlugins = (isBeta: boolean, appName: string) => Promise<PluginType[]>;\n\nexport const getActivePlugins: GetActivePlugins = async (isBeta, appName) => {\n  try {\n    return (await fetch(`${isBeta ? '/beta' : ''}/apps/${appName}/plugins.json`)).json();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Failed to fetch plugin data', e);\n    return [];\n  }\n};\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","selector","_state$api","state","useScalprum","chrome","api","initialized","navExtensionTypes","isFulfilledPromise","result","status","Boolean","value","isNavItem","extension","includes","type","calculateNavigation","dynamicNav","currentNamespace","base","isBeta","appId","navSection","split","routes","allExtensions","plugins","Promise","allSettled","flatMap","name","pluginName","pathPrefix","url","response","fetch","msg","statusText","console","error","Error","json","extensions","map","flat","getAllExtensions","properties","section","href","title","calculateRoutes","isHidden","e","currSection","find","id","expandable","useNavigation","navigation","setNavigation","unmounted","then","data","current","getActivePlugins","appName","_defineProperty","obj","configurable","writable"],"sourceRoot":""}