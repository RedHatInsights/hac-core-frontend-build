{"version":3,"file":"js/313.657ea1621801f8c8eb2e.js","mappings":"oKAGO,MAAMA,EACXC,YAA6BC,GAAA,KAAAA,OAAAA,EAG7BC,sBAAsBC,EAAUC,GACX,iBAARD,IACTE,KAAKJ,OAAOK,WACVH,EAAII,QAAU,IACd,GAAGH,8CAELC,KAAKJ,OAAOK,WACV,gBAAgBE,KAAKL,GACrB,GAAGC,qEAELC,KAAKJ,OAAOK,WACV,aAAaE,KAAKL,IAAQ,aAAaK,KAAKL,GAC5C,GAAGC,wDAKTK,kBAAkBN,EAAUC,GACP,iBAARD,GACTE,KAAKJ,OAAOK,aAAaI,EAAOC,MAAMR,GAAM,GAAGC,8BAInDQ,uBAAuBT,EAAUC,GACZ,iBAARD,GACTE,KAAKJ,OAAOK,aAAaI,EAAOG,WAAWV,GAAM,GAAGC,gC,wBC9BnD,MAAMU,EAGXd,YAA6Be,GAAA,KAAAA,YAAAA,EAFZ,KAAAC,OAAmB,GAIpCV,WAAWW,EAAoBC,GACxBD,GACHZ,KAAKc,SAASD,GAIlBC,SAASD,GACPb,KAAKW,OAAOI,KAAKF,GAGnBG,YACE,OAAOhB,KAAKW,OAAOT,OAAS,EAG9Be,YACE,MAAO,IAAIjB,KAAKW,QAGlBO,eAGE,MAFe,GAAG,SAAWlB,KAAKU,iBAAiBV,KAAKW,OAAOT,mBAC5CF,KAAKW,OAAOQ,KAAKC,GAAM,OAAO,QAAUA,OAChCC,KAAK,MAGlCC,OAAOC,GAAyB,GAC9B,GAAIvB,KAAKgB,cAEPQ,QAAQC,MAAMzB,KAAKkB,gBAEfK,GACF,MAAM,IAAIG,MAAM,sBCjCjB,MAAMC,EAKXhC,YAAYe,EAAsCkB,EAAM,IAAI,EAAI,CAAEC,WAAW,KAA3B,KAAAD,IAAAA,EAChD5B,KAAKJ,OAAS,IAAIa,EAAiBC,GACnCV,KAAK8B,OAAS,IAAIpC,EAAqBM,KAAKJ,QAG9CmC,SAASC,EAAYC,EAAWC,EAAkB,OAQhD,OAPKlC,KAAK4B,IAAIG,SAASC,EAAQC,IAC7BjC,KAAK4B,IAAIjB,OAAOwB,SAASV,IAEvBzB,KAAKJ,OAAOkB,SAAS,GAAGoB,IAAUT,EAAMW,YAAYX,EAAMZ,cAIvDb,KAAKJ","sources":["webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/validation/ValidationAssertions.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/validation/ValidationResult.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/validation/SchemaValidator.ts"],"sourcesContent":["import * as semver from 'semver';\nimport { ValidationResult } from './ValidationResult';\n\nexport class ValidationAssertions {\n  constructor(private readonly result: ValidationResult) {}\n\n  // https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names\n  validDNSSubdomainName(obj: any, objPath: string) {\n    if (typeof obj === 'string') {\n      this.result.assertThat(\n        obj.length <= 253,\n        `${objPath} must contain no more than 253 characters`,\n      );\n      this.result.assertThat(\n        /^[a-z0-9-.]*$/.test(obj),\n        `${objPath} must contain only lowercase alphanumeric characters, '-' or '.'`,\n      );\n      this.result.assertThat(\n        /^[a-z0-9]+/.test(obj) && /[a-z0-9]+$/.test(obj),\n        `${objPath} must start and end with an alphanumeric character`,\n      );\n    }\n  }\n\n  validSemverString(obj: any, objPath: string) {\n    if (typeof obj === 'string') {\n      this.result.assertThat(!!semver.valid(obj), `${objPath} must be semver compliant`);\n    }\n  }\n\n  validSemverRangeString(obj: any, objPath: string) {\n    if (typeof obj === 'string') {\n      this.result.assertThat(!!semver.validRange(obj), `${objPath} semver range is not valid`);\n    }\n  }\n}\n","import chalk from 'chalk';\n\nexport class ValidationResult {\n  private readonly errors: string[] = [];\n\n  constructor(private readonly description: string) {}\n\n  assertThat(condition: boolean, message: string) {\n    if (!condition) {\n      this.addError(message);\n    }\n  }\n\n  addError(message: string) {\n    this.errors.push(message);\n  }\n\n  hasErrors() {\n    return this.errors.length > 0;\n  }\n\n  getErrors() {\n    return [...this.errors];\n  }\n\n  formatErrors() {\n    const prefix = `${chalk.bold(this.description)} (${this.errors.length} errors)\\n`;\n    const errorLines = this.errors.map((e) => `    ${chalk.red(e)}`);\n    return prefix + errorLines.join('\\n');\n  }\n\n  report(throwOnErrors: boolean = true) {\n    if (this.hasErrors()) {\n      // eslint-disable-next-line no-console\n      console.error(this.formatErrors());\n\n      if (throwOnErrors) {\n        throw new Error('Validation failed');\n      }\n    }\n  }\n}\n","import * as Ajv from 'ajv';\nimport { ValidationAssertions } from './ValidationAssertions';\nimport { ValidationResult } from './ValidationResult';\n\nexport class SchemaValidator {\n  readonly result: ValidationResult;\n\n  readonly assert: ValidationAssertions;\n\n  constructor(description: string, private readonly ajv = new Ajv({ allErrors: true })) {\n    this.result = new ValidationResult(description);\n    this.assert = new ValidationAssertions(this.result);\n  }\n\n  validate(schema: {}, data: any, dataVar: string = 'obj') {\n    if (!this.ajv.validate(schema, data)) {\n      this.ajv.errors.forEach((error) => {\n        // This format is consistent with ajv.errorsText() implementation\n        this.result.addError(`${dataVar}${error.dataPath} ${error.message}`);\n      });\n    }\n\n    return this.result;\n  }\n}\n"],"names":["ValidationAssertions","constructor","result","validDNSSubdomainName","obj","objPath","this","assertThat","length","test","validSemverString","semver","valid","validSemverRangeString","validRange","ValidationResult","description","errors","condition","message","addError","push","hasErrors","getErrors","formatErrors","map","e","join","report","throwOnErrors","console","error","Error","SchemaValidator","ajv","allErrors","assert","validate","schema","data","dataVar","forEach","dataPath"],"sourceRoot":""}