{"version":3,"file":"js/DynamicRoute.97d338f54a06277d6af6.js","mappings":"sIAuFKA,E,gEAAL,SAAKA,GACH,oBACA,sBAFF,CAAKA,IAAAA,EAAS,K,kVChFd,MAAMC,EAAS,IACb,gBAAC,EAAAC,SAAQ,KACP,gBAAC,EAAAC,QAAO,OAoDZ,EA5CkD,EAAGC,SAAAA,MACnD,MAAOC,EAAWC,GAAgB,WAA2C,YACvEC,GAAoB,QAAgC,MA6B1D,OA5BA,aAAgB,K,MACd,GAAIH,EAAU,CACZ,MAAO,CAAE,CAAEI,IAAwB,QAAjB,EAAAJ,EAASK,gBAAQ,eAAEC,MAAM,OAAQ,GACnD,GAAIF,EAAK,CACP,MAAQG,WAAYC,EAAS,WAAEC,GAAeN,EAAkBO,MAAK,EAAGH,WAAAA,KAAiBA,EAAWI,OAAS,IAAIP,OAAU,GACvHI,GACFN,GAAa,IACX,QAAW,IAAY,OAAD,6BACpB,IACE,MAAO,CACLU,eAAgBJ,EAAUK,cAAgBhB,GAE5C,MAAOiB,GACP,MAAO,CACLF,QAAS,IACP,gBAAC,EAAAd,SAAQ,KACP,gBAACiB,EAAA,EAAU,CAACC,WAAY,oCAAoCP,4BAU7E,CAACT,EAAUG,IAGZ,gBAACc,EAAA,EAAI,KACFhB,EACC,gBAAC,WAAc,CAACiB,SAAU,MACxB,gBAACjB,EAAS,OAGZ,gBAACJ,EAAM","sources":["webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/api/common-types.ts","webpack:///./src/Routes/DynamicRoute/DynamicRoute.tsx"],"sourcesContent":["export { ResolvedExtension } from '../types';\n\n// Type for extension hook\nexport type ExtensionHook<T, R = any> = (options: R) => ExtensionHookResult<T>;\n\n// Type for extension hook result that returns [data, resolved, error]\nexport type ExtensionHookResult<T> = [T, boolean, any];\n\nexport type ExtensionK8sModel = {\n  group: string;\n  version: string;\n  kind: string;\n};\n\nexport type ExtensionK8sGroupModel = {\n  group: string;\n  version?: string;\n  kind?: string;\n};\n\nexport type ExtensionK8sGroupKindModel = {\n  group: string;\n  version?: string;\n  kind: string;\n};\n\nexport type ExtensionK8sKindVersionModel = {\n  group?: string;\n  version: string;\n  kind: string;\n};\n\nexport type K8sKind = {\n  abbr: string;\n  kind: string;\n  label: string;\n  labelKey?: string;\n  labelPlural: string;\n  labelPluralKey?: string;\n  plural: string;\n  propagationPolicy?: 'Foreground' | 'Background';\n\n  id?: string;\n  crd?: boolean;\n  apiVersion: string;\n  apiGroup?: string;\n  namespaced?: boolean;\n  selector?: Selector;\n  labels?: { [key: string]: string };\n  annotations?: { [key: string]: string };\n  verbs?: K8sVerb[];\n  shortNames?: string[];\n  badge?: BadgeType;\n  color?: string;\n\n  // Legacy option for supporing plural names in URL paths when `crd: true`.\n  // This should not be set for new models, but is needed to avoid breaking\n  // existing links as we transition to using the API group in URL paths.\n  legacyPluralURL?: boolean;\n};\n\ntype MatchExpression = {\n  key: string;\n  operator: 'Exists' | 'DoesNotExist' | 'In' | 'NotIn' | 'Equals' | 'NotEqual';\n  values?: string[];\n  value?: string;\n};\n\ntype MatchLabels = {\n  [key: string]: string;\n};\n\ntype Selector = {\n  matchLabels?: MatchLabels;\n  matchExpressions?: MatchExpression[];\n};\n\ntype K8sVerb =\n  | 'create'\n  | 'get'\n  | 'list'\n  | 'update'\n  | 'patch'\n  | 'delete'\n  | 'deletecollection'\n  | 'watch';\n\nenum BadgeType {\n  DEV = 'Dev Preview',\n  TECH = 'Tech Preview',\n}\n\nexport const enum AlertStates {\n  Firing = 'firing',\n  NotFiring = 'not-firing',\n  Pending = 'pending',\n  Silenced = 'silenced',\n}\n\nexport const enum SilenceStates {\n  Active = 'active',\n  Expired = 'expired',\n  Pending = 'pending',\n}\n\nexport const enum AlertSeverity {\n  Critical = 'critical',\n  Info = 'info',\n  None = 'none',\n  Warning = 'warning',\n}\n\nexport const enum RuleStates {\n  Firing = 'firing',\n  Inactive = 'inactive',\n  Pending = 'pending',\n  Silenced = 'silenced',\n}\n\nexport type Silence = {\n  comment: string;\n  createdBy: string;\n  endsAt: string;\n  firingAlerts: Alert[];\n  id?: string;\n  matchers: { name: string; value: string; isRegex: boolean }[];\n  name?: string;\n  startsAt: string;\n  status?: { state: SilenceStates };\n  updatedAt?: string;\n};\n\nexport type PrometheusAlert = {\n  activeAt?: string;\n  annotations: PrometheusLabels;\n  labels: PrometheusLabels & {\n    alertname: string;\n    severity?: AlertSeverity | string;\n  };\n  state: AlertStates;\n  value?: number | string;\n};\n\nexport type Alert = PrometheusAlert & {\n  rule: Rule;\n  silencedBy?: Silence[];\n};\n\nexport type PrometheusRule = {\n  alerts: PrometheusAlert[];\n  annotations: PrometheusLabels;\n  duration: number;\n  labels: PrometheusLabels & {\n    severity?: string;\n  };\n  name: string;\n  query: string;\n  state: RuleStates;\n  type: string;\n};\n\nexport type Rule = PrometheusRule & {\n  id: string;\n  silencedBy?: Silence[];\n};\n\nexport type PrometheusLabels = { [key: string]: string };\nexport type PrometheusValue = [number, string];\n","import * as React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useExtensions } from '@console/plugin-sdk/src';\nimport { ErrorState } from '@redhat-cloud-services/frontend-components/ErrorState';\nimport { isRoutePage as isDynamicRoutePage, RoutePage as DynamicRoutePage } from '@console/dynamic-plugin-sdk';\n\nconst Loader = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n\ntype DynamicRouteProps = {\n  location?: Location;\n};\n\nconst DynamicRoute: React.FC<DynamicRouteProps> = ({ location }) => {\n  const [Component, setComponent] = React.useState<React.ExoticComponent<any>>(React.Fragment);\n  const dynamicRoutePages = useExtensions<DynamicRoutePage>(isDynamicRoutePage);\n  React.useEffect(() => {\n    if (location) {\n      const [, , app] = location.pathname?.split('/') || [];\n      if (app) {\n        const { properties: currRoute, pluginName } = dynamicRoutePages.find(({ properties }) => properties.path === `/${app}`) || {};\n        if (currRoute) {\n          setComponent(() =>\n            React.lazy(async () => {\n              try {\n                return {\n                  default: (await currRoute.component()) || Loader,\n                };\n              } catch (e) {\n                return {\n                  default: () => (\n                    <Bullseye>\n                      <ErrorState errorTitle={`There was an error while loading ${pluginName} plugin.`} />\n                    </Bullseye>\n                  ),\n                };\n              }\n            }),\n          );\n        }\n      }\n    }\n  }, [location, dynamicRoutePages]);\n\n  return (\n    <Main>\n      {Component ? (\n        <React.Suspense fallback={null}>\n          <Component />\n        </React.Suspense>\n      ) : (\n        <Loader />\n      )}\n    </Main>\n  );\n};\n\nexport default DynamicRoute;\n"],"names":["BadgeType","Loader","Bullseye","Spinner","location","Component","setComponent","dynamicRoutePages","app","pathname","split","properties","currRoute","pluginName","find","path","default","component","e","ErrorState","errorTitle","Main","fallback"],"sourceRoot":""}