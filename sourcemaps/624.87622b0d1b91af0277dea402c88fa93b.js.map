{"version":3,"file":"js/624.6add23fef34b471d6326.js","mappings":"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","sources":["webpack:///./config/empty.js","webpack:///./src/poc-code/console-mount/src/components/foundation/static-routes/EmptyRoute.tsx","webpack:///./src/Routes.tsx","webpack:///./src/App.tsx","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/api/useResolvedExtensions.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/coderefs/coderef-resolver.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/add-actions.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/catalog.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/cluster-settings.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/context-providers.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/dashboards.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/feature-flags.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/file-upload.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/navigation.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/pages.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/perspectives.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/pvc.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/redux.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/resource-metadata.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/telemetry.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/yaml-templates.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/notification-alert.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/console-types.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/storage-provider.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/actions.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/create-resource.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/extensions/user-preferences.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/api/api.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/perspective/perspective-context.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/perspective/useActivePerspective.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/perspective/withActivePerspective.tsx","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/utils/error/custom-error.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/utils/error/http-error.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/utils/fetch/console-fetch-utils.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/utils/fetch/console-fetch.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/utils/object.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/utils/promise.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/shared-modules-override.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/runtime/plugin-loader.ts","webpack:///./src/poc-code/console-dynamic-plugin-sdk/src/runtime/plugin-init.ts","webpack:///./src/poc-code/console-mount/src/redux/middleware/thunk.ts","webpack:///./src/poc-code/console-mount/src/redux/reducers/index.ts","webpack:///./src/poc-code/console-mount/src/redux/reducers/flags.ts","webpack:///./src/poc-code/console-mount/src/redux/useReduxStore.ts","webpack:///./src/poc-code/console-mount/src/components/plugins/IncludePlugins.tsx","webpack:///./src/poc-code/console-mount/src/components/plugins/utils.ts","webpack:///./src/poc-code/console-plugin-sdk/src/api/pluginSubscriptionService.ts","webpack:///./src/poc-code/console-plugin-sdk/src/utils/extension-i18n.ts","webpack:///./src/poc-code/console-plugin-sdk/src/api/useExtensions.ts","webpack:///./src/poc-code/console-plugin-sdk/src/store.ts","webpack:///./src/store/index.ts"],"sourcesContent":["// Used as an empty module to save bundle size\nmodule.exports = {};\n","import * as React from 'react';\nimport { EmptyState, EmptyStateIcon, EmptyStateBody, Title } from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/js/icons/cubes-icon';\n\nconst EmptyRoute: React.FC = () => {\n  return (\n    <EmptyState>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        Empty Route\n      </Title>\n      <EmptyStateBody>\n        <p>Nothing to see here.</p>\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n\nexport default EmptyRoute;\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport EmptyRoute from '@console/mount/src/components/foundation/static-routes/EmptyRoute';\n\nexport const Routes: React.FC = () => (\n  <React.Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/\" component={EmptyRoute} />\n      <Route>\n        <Redirect to=\"/\" />\n      </Route>\n    </Switch>\n  </React.Suspense>\n);\n","import * as React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst App: React.FC = () => {\n  const history = useHistory();\n\n  React.useEffect(() => {\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer });\n    window.insights?.chrome?.init();\n\n    window.insights?.chrome.identifyApp('hac');\n    const unregister = window.insights?.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal />\n      <Routes />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\nimport { useExtensions } from '@console/plugin-sdk/src/api/useExtensions';\nimport { resolveExtension } from '../coderefs/coderef-resolver';\nimport { UseResolvedExtensions } from '../extensions/console-types';\nimport { Extension, ExtensionTypeGuard, ResolvedExtension } from '../types';\nimport { settleAllPromises } from '../utils/promise';\n\n/**\n * React hook for consuming Console extensions with resolved `CodeRef` properties.\n *\n * This hook accepts the same argument(s) as `useExtensions` hook and returns an\n * adapted list of extension instances, resolving all code references within each\n * extension's properties.\n *\n * Initially, the hook returns an empty array. Once the resolution is complete,\n * the React component is re-rendered with the hook returning an adapted list of\n * extensions.\n *\n * When the list of matching extensions changes, the resolution is restarted. The\n * hook will continue to return the previous result until the resolution completes.\n *\n * Example usage:\n *\n * ```ts\n * const [navItemExtensions, navItemsResolved] = useResolvedExtensions<NavItem>(isNavItem);\n * // process adapted extensions and render your component\n * ```\n *\n * The hook's result elements are guaranteed to be referentially stable across re-renders.\n *\n * @param typeGuards Type guard(s) used to narrow the extension instances.\n *\n * @returns Tuple containing a list of adapted extension instances with resolved code\n * references, boolean flag indicating whether the resolution is complete, and a list\n * of errors detected during the resolution.\n */\nexport const useResolvedExtensions: UseResolvedExtensions = <E extends Extension>(\n  ...typeGuards: ExtensionTypeGuard<E>[]\n): [ResolvedExtension<E>[], boolean, any[]] => {\n  const extensions = useExtensions<E>(...typeGuards);\n\n  const [resolvedExtensions, setResolvedExtensions] = React.useState<ResolvedExtension<E>[]>([]);\n  const [resolved, setResolved] = React.useState<boolean>(false);\n  const [errors, setErrors] = React.useState<any[]>([]);\n\n  React.useEffect(() => {\n    let disposed = false;\n\n    // eslint-disable-next-line promise/catch-or-return\n    settleAllPromises(\n      extensions.map((e) => resolveExtension<typeof e, any, ResolvedExtension<E>>(e)),\n    ).then(([fulfilledValues, rejectedReasons]) => {\n      if (!disposed) {\n        setResolvedExtensions(fulfilledValues);\n        setErrors(rejectedReasons);\n        setResolved(true);\n\n        if (rejectedReasons.length > 0) {\n          // eslint-disable-next-line no-console\n          console.error('Detected errors while resolving Console extensions', rejectedReasons);\n        }\n      }\n    });\n\n    return () => {\n      disposed = true;\n    };\n  }, [extensions]);\n\n  return [resolvedExtensions, resolved, errors];\n};\n","/* eslint-disable no-console */\n\nimport * as _ from 'lodash';\nimport {\n  Extension,\n  RemoteEntryModule,\n  EncodedCodeRef,\n  CodeRef,\n  ResolvedCodeRefProperties,\n  ExtensionProperties,\n  UpdateExtensionProperties,\n} from '../types';\nimport { deepForOwn } from '../utils/object';\nimport { settleAllPromises } from '../utils/promise';\n\nconst codeRefSymbol = Symbol('CodeRef');\n\nexport const applyCodeRefSymbol = <T = any>(ref: CodeRef<T>) => {\n  ref[codeRefSymbol] = true;\n  return ref;\n};\n\nexport const isEncodedCodeRef = (obj): obj is EncodedCodeRef =>\n  _.isPlainObject(obj) &&\n  _.isEqual(Object.getOwnPropertyNames(obj), ['$codeRef']) &&\n  typeof (obj as EncodedCodeRef).$codeRef === 'string';\n\nexport const isExecutableCodeRef = (obj): obj is CodeRef =>\n  _.isFunction(obj) &&\n  _.isEqual(Object.getOwnPropertySymbols(obj), [codeRefSymbol]) &&\n  obj[codeRefSymbol] === true;\n\n/**\n * Parse the `EncodedCodeRef` value into `[moduleName, exportName]` tuple.\n *\n * Returns an empty array if the value doesn't match the expected format.\n */\nexport const parseEncodedCodeRefValue = (value: string): [string, string] | [] => {\n  const match = value.match(/^([^.]+)(?:\\.(.+)){0,1}$/);\n  return match ? [match[1], match[2] || 'default'] : [];\n};\n\n/**\n * Returns the object referenced by the `EncodedCodeRef`.\n *\n * If an error occurs, calls `errorCallback` and returns `null`.\n *\n * _Does not throw errors by design._\n */\nexport const loadReferencedObject = async <TExport = any>(\n  ref: EncodedCodeRef,\n  entryModule: RemoteEntryModule,\n  pluginID: string,\n  errorCallback: VoidFunction,\n): Promise<TExport> => {\n  const [moduleName, exportName] = parseEncodedCodeRefValue(ref.$codeRef);\n  let requestedModule: {};\n\n  if (!moduleName) {\n    console.error(`Malformed code reference '${ref.$codeRef}' of plugin ${pluginID}`);\n    errorCallback();\n    return null;\n  }\n\n  try {\n    const moduleFactory = await entryModule.get(moduleName);\n    requestedModule = moduleFactory();\n  } catch (error) {\n    console.error(`Failed to load module '${moduleName}' of plugin ${pluginID}`, error);\n    errorCallback();\n    return null;\n  }\n\n  if (!requestedModule[exportName]) {\n    console.error(`Missing module export '${moduleName}.${exportName}' of plugin ${pluginID}`);\n    errorCallback();\n    return null;\n  }\n\n  return requestedModule[exportName];\n};\n\n/**\n * Returns new `extensions` array, resolving `EncodedCodeRef` values into `CodeRef` functions.\n *\n * _Does not execute `CodeRef` functions to load the referenced objects._\n */\nexport const resolveEncodedCodeRefs = (\n  extensions: Extension[],\n  entryModule: RemoteEntryModule,\n  pluginID: string,\n  errorCallback: VoidFunction,\n): Extension[] =>\n  _.cloneDeep(extensions).map((e) => {\n    deepForOwn<EncodedCodeRef>(e.properties, isEncodedCodeRef, (ref, key, obj) => {\n      const loader = applyCodeRefSymbol(async () =>\n        loadReferencedObject(ref, entryModule, pluginID, errorCallback),\n      );\n      obj[key] = Object.defineProperty(loader, 'name', { value: `${pluginID}-${ref.$codeRef}` });\n    });\n\n    return e;\n  });\n\n/**\n * Returns an extension with its `CodeRef` properties replaced with referenced objects.\n */\nexport const resolveExtension = async <\n  E extends Extension<P>,\n  P = ExtensionProperties<E>,\n  R = UpdateExtensionProperties<E, ResolvedCodeRefProperties<P>, P>\n>(\n  extension: E,\n): Promise<R> => {\n  const valueResolutions: Promise<void>[] = [];\n\n  deepForOwn<CodeRef>(extension.properties, isExecutableCodeRef, (ref, key, obj) => {\n    valueResolutions.push(\n      ref().then((resolvedValue) => {\n        obj[key] = resolvedValue;\n      }),\n    );\n  });\n\n  await settleAllPromises(valueResolutions);\n\n  return (extension as unknown) as R;\n};\n","import * as React from 'react';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\nimport { AccessReviewResourceAttributes } from './console-types';\n\nexport type AddAction = ExtensionDeclaration<\n  'dev-console.add/action',\n  {\n    /** ID used to identify the action. */\n    id: string;\n    /** IDs used to identify the action groups the action would belong to. */\n    groupId?: string;\n    /** The label of the action */\n    label: string;\n    /** The description of the action. */\n    description: string;\n    /** The href to navigate to. */\n    href: string;\n    /** The perspective display icon. */\n    icon?: CodeRef<React.ReactNode>;\n    /** Optional access review to control visibility / enablement of the action. */\n    accessReview?: AccessReviewResourceAttributes[];\n  }\n>;\n\nexport type AddActionGroup = ExtensionDeclaration<\n  'dev-console.add/action-group',\n  {\n    /** ID used to identify the action group. */\n    id: string;\n    /** The title of the action group */\n    name: string;\n    /** ID of action group before which this group should be placed */\n    insertBefore?: string;\n    /** ID of action group after which this group should be placed */\n    insertAfter?: string;\n  }\n>;\n\n// Type guards\n\nexport const isAddAction = (e: Extension): e is AddAction => {\n  return e.type === 'dev-console.add/action';\n};\n\nexport const isAddActionGroup = (e: Extension): e is AddActionGroup => {\n  return e.type === 'dev-console.add/action-group';\n};\n","import * as React from 'react';\nimport { ExtensionHook } from '../api/common-types';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\nexport type CatalogItemType = ExtensionDeclaration<\n  'console.catalog/item-type',\n  {\n    /** Type for the catalog item. */\n    type: string;\n    /** Title for the catalog item. */\n    title: string;\n    /** Description for the type specific catalog. */\n    catalogDescription?: string;\n    /** Description for the catalog item type. */\n    typeDescription?: string;\n    /** Custom filters specific to the catalog item.  */\n    filters?: CatalogItemAttribute[];\n    /** Custom groupings specific to the catalog item. */\n    groupings?: CatalogItemAttribute[];\n  }\n>;\n\nexport type CatalogItemProvider = ExtensionDeclaration<\n  'console.catalog/item-provider',\n  {\n    /** The unique identifier for the catalog this provider contributes to. */\n    catalogId: string | string[];\n    /** Type ID for the catalog item type. */\n    type: string;\n    /** Fetch items and normalize it for the catalog. Value is a react effect hook. */\n    provider: CodeRef<ExtensionHook<CatalogItem[], CatalogExtensionHookOptions>>;\n    /** Priority for this provider. Defaults to 0. Higher priority providers may override catalog\n        items provided by other providers. */\n    priority?: number;\n  }\n>;\n\nexport type CatalogItemFilter = ExtensionDeclaration<\n  'console.catalog/item-filter',\n  {\n    /** The unique identifier for the catalog this provider contributes to. */\n    catalogId: string | string[];\n    /** Type ID for the catalog item type. */\n    type: string;\n    /** Filters items of a specific type. Value is a function that takes CatalogItem[] and returns a subset based on the filter criteria. */\n    filter: CodeRef<(item: CatalogItem) => boolean>;\n  }\n>;\n\nexport type SupportedCatalogExtensions = CatalogItemType | CatalogItemProvider | CatalogItemFilter;\n\n// Type guards\n\nexport const isCatalogItemType = (e: Extension): e is CatalogItemType => {\n  return e.type === 'console.catalog/item-type';\n};\n\nexport const isCatalogItemProvider = (e: Extension): e is CatalogItemProvider => {\n  return e.type === 'console.catalog/item-provider';\n};\n\nexport const isCatalogItemFilter = (e: Extension): e is CatalogItemFilter => {\n  return e.type === 'console.catalog/item-filter';\n};\n\n// Support types\n\nexport type CatalogExtensionHookOptions = {\n  namespace: string;\n};\n\nexport type CatalogItem<T extends any = any> = {\n  uid: string;\n  type: string;\n  name: string;\n  /** Optional title to render a custom title using ReactNode.\n   * Rendered in catalog tile and side panel\n   *  */\n  title?: React.ReactNode;\n  // Used as the second label next to the provider label in the list result.\n  secondaryLabel?: React.ReactNode;\n  provider?: string;\n  // Used as the tile description. If provided as a string, the description is truncated to 3 lines.\n  // If provided as a ReactNode, the contents will not be truncated.\n  // This description will also be shown in the side panel if there are no `details.descriptions`.\n  description?: string | React.ReactNode;\n  tags?: string[];\n  creationTimestamp?: string;\n  supportUrl?: string;\n  documentationUrl?: string;\n  attributes?: {\n    [key: string]: any;\n  };\n  cta?: {\n    label: string;\n    href?: string;\n    callback?: (props?: any) => void;\n  };\n  icon?: {\n    url?: string;\n    class?: string;\n    node?: React.ReactNode;\n  };\n  details?: {\n    properties?: CatalogItemDetailsProperty[];\n    descriptions?: CatalogItemDetailsDescription[];\n  };\n  // Optional text only badges for the catalog item which will be rendered on the tile and details panel.\n  badges?: CatalogItemBadge[];\n  // Optional data attached by the provider.\n  // May be consumed by filters.\n  // `data` for each `type` of CatalogItem should implement the same interface.\n  data?: T;\n};\n\nexport type CatalogItemDetailsProperty = {\n  label: string;\n  value: string | React.ReactNode;\n};\n\nexport type CatalogItemDetailsDescription = {\n  label?: string;\n  value: string | React.ReactNode;\n};\n\nexport type CatalogItemAttribute = {\n  label: string;\n  attribute: string;\n};\n\nexport type CatalogItemBadge = {\n  text: string;\n  color?: 'blue' | 'cyan' | 'green' | 'orange' | 'purple' | 'red' | 'grey';\n  icon?: React.ReactNode;\n  variant?: 'outline' | 'filled';\n};\n","import { ExtensionK8sModel } from '../api/common-types';\nimport { Extension, ExtensionDeclaration } from '../types';\n\nexport type ClusterGlobalConfig = ExtensionDeclaration<\n  'console.global-config',\n  {\n    /** Unique identifier for the cluster config resource instance. */\n    id: string;\n    /** The name of the cluster config resource instance. */\n    name: string;\n    /** The model which refers to a cluster config resource. */\n    model: ExtensionK8sModel;\n    /** The namespace of the cluster config resource instance. */\n    namespace: string;\n  }\n>;\n\n// Type guards\n\nexport const isClusterGlobalConfig = (e: Extension): e is ClusterGlobalConfig =>\n  e.type === 'console.global-config';\n","import { Provider } from 'react';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\n/** Adds new React context provider to Console application root. */\nexport type ContextProvider<T = any> = ExtensionDeclaration<\n  'console.context-provider',\n  {\n    /** Context Provider component. */\n    provider: CodeRef<Provider<T>>;\n    /** Hook for the Context value. */\n    useValueHook: CodeRef<() => T>;\n  }\n>;\n\n// Type guards\n\nexport const isContextProvider = (e: Extension): e is ContextProvider =>\n  e.type === 'console.context-provider';\n","import { K8sKind } from '../api/common-types';\nimport { Extension, ExtensionDeclaration, CodeRef, ResolvedExtension } from '../types';\nimport {\n  K8sResourceCommon,\n  PrometheusResponse,\n  ResourcesObject,\n  StatusGroupMapper,\n  WatchK8sResources,\n  WatchK8sResults,\n  FirehoseResource,\n  FirehoseResult,\n} from './console-types';\nimport {\n  DashboardCardSpan,\n  GetOperatorsWithStatuses,\n  K8sActivityProps,\n  OperatorRowProps,\n  PrometheusActivityProps,\n  PrometheusHealthHandler,\n  PrometheusHealthPopupProps,\n  ResourceHealthHandler,\n  URLHealthHandler,\n} from './dashboard-types';\n\n/** Adds a new dashboard tab, placed after the Overview tab. */\nexport type DashboardsTab = ExtensionDeclaration<\n  'console.dashboards/tab',\n  {\n    /** A unique tab identifier, used as tab link `href` and when adding cards to this tab. */\n    id: string;\n    /** NavSection to which the tab belongs to */\n    navSection: 'home' | 'storage';\n    /** The title of the tab. */\n    title: string;\n  }\n>;\n\n/** Adds a new dashboard card. */\nexport type DashboardsCard = ExtensionDeclaration<\n  'console.dashboards/card',\n  {\n    /** The id of the dashboard tab to which the card will be added. */\n    tab: string;\n    /** The grid position of the card on the dashboard. */\n    position: 'LEFT' | 'RIGHT' | 'MAIN';\n    /** Dashboard card component. */\n    component: CodeRef<React.ComponentType>;\n    /** Card's vertical span in the column. Ignored for small screens, defaults to 12. */\n    span?: DashboardCardSpan;\n  }\n>;\n\n/** Adds a health subsystem to the status card of Overview dashboard where the source of status is Prometheus. */\nexport type DashboardsOverviewHealthPrometheusSubsystem = ExtensionDeclaration<\n  'console.dashboards/overview/health/prometheus',\n  {\n    /** The display name of the subsystem. */\n    title: string;\n    /** The Prometheus queries */\n    queries: string[];\n    /** Resolve the subsystem's health. */\n    healthHandler: CodeRef<PrometheusHealthHandler>;\n    /** Additional resource which will be fetched and passed to `healthHandler`. */\n    additionalResource?: CodeRef<FirehoseResource>;\n    /** Loader for popup content. If defined, a health item will be represented as a link which opens popup with given content. */\n    popupComponent?: CodeRef<React.ComponentType<PrometheusHealthPopupProps>>;\n    /** The title of the popover. */\n    popupTitle?: string;\n    /** Cloud providers which for which the subsystem should be hidden. */\n    disallowedProviders?: string[];\n  }\n>;\n\n/** Adds a health subsystem to the status card of Overview dashboard where the source of status is a K8s REST API. */\nexport type DashboardsOverviewHealthURLSubsystem<\n  T = any,\n  R extends K8sResourceCommon | K8sResourceCommon[] = K8sResourceCommon | K8sResourceCommon[]\n> = ExtensionDeclaration<\n  'console.dashboards/overview/health/url',\n  {\n    /** The display name of the subsystem. */\n    title: string;\n    /** The URL to fetch data from. It will be prefixed with base k8s URL. */\n    url: string;\n    /** Resolve the subsystem's health. */\n    healthHandler: CodeRef<URLHealthHandler<T>>;\n    /** Additional resource which will be fetched and passed to `healthHandler`. */\n    additionalResource?: CodeRef<FirehoseResource>;\n    /** Loader for popup content. If defined, a health item will be represented as a link which opens popup with given content. */\n    popupComponent?: CodeRef<\n      React.ComponentType<{\n        healthResult?: T;\n        healthResultError?: any;\n        k8sResult?: FirehoseResult<R>;\n      }>\n    >;\n    /** The title of the popover. */\n    popupTitle?: string;\n  }\n>;\n\n/** Adds a health subsystem to the status card of Overview dashboard where the source of status is a K8s Resource. */\nexport type DashboardsOverviewHealthResourceSubsystem<\n  T extends ResourcesObject = ResourcesObject\n> = ExtensionDeclaration<\n  'console.dashboards/overview/health/resource',\n  {\n    /** The display name of the subsystem. */\n    title: string;\n    /** Kubernetes resources which will be fetched and passed to `healthHandler`. */\n    resources: CodeRef<WatchK8sResources<T>>;\n    /** Resolve the subsystem's health. */\n    healthHandler: CodeRef<ResourceHealthHandler<T>>;\n    /** Loader for popup content. If defined, a health item will be represented as a link which opens popup with given content. */\n    popupComponent?: CodeRef<WatchK8sResults<T>>;\n    /** The title of the popover. */\n    popupTitle?: string;\n  }\n>;\n\n/** Adds a health subsystem to the status card of Overview dashboard where the source of status is a K8s REST API. */\nexport type DashboardsOverviewHealthOperator<\n  T extends K8sResourceCommon = K8sResourceCommon\n> = ExtensionDeclaration<\n  'console.dashboards/overview/health/operator',\n  {\n    /** Title of operators section in the popup. */\n    title: string;\n    /** Kubernetes resources which will be fetched and passed to `healthHandler`. */\n    resources: CodeRef<FirehoseResource[]>;\n    /** Resolves status for the operators. */\n    getOperatorsWithStatuses?: CodeRef<GetOperatorsWithStatuses<T>>;\n    /** Loader for popup row component. */\n    operatorRowLoader?: CodeRef<React.ComponentType<OperatorRowProps<T>>>;\n    /** Links to all resources page. If not provided then a list page of the first resource from resources prop is used. */\n    viewAllLink?: string;\n  }\n>;\n\n/** Adds an inventory status group. */\nexport type DashboardsInventoryItemGroup = ExtensionDeclaration<\n  'console.dashboards/overview/inventory/item/group',\n  {\n    /** The id of the status group. */\n    id: string;\n    /** React component representing the status group icon. */\n    icon: CodeRef<React.ReactElement>;\n  }\n>;\n\n/** Adds a resource tile to the overview inventory card. */\nexport type DashboardsOverviewInventoryItem<\n  T extends K8sKind = K8sKind,\n  R extends { [key: string]: K8sResourceCommon[] } = { [key: string]: K8sResourceCommon[] }\n> = ExtensionDeclaration<\n  'console.dashboards/overview/inventory/item',\n  DashboardsOverviewInventoryItemProperties<T, R> & {}\n>;\n\n/** Replaces an overview inventory card. */\nexport type DashboardsOverviewInventoryItemReplacement<\n  T extends K8sKind = K8sKind,\n  R extends { [key: string]: K8sResourceCommon[] } = { [key: string]: K8sResourceCommon[] }\n> = ExtensionDeclaration<\n  'console.dashboards/overview/inventory/item/replacement',\n  DashboardsOverviewInventoryItemProperties<T, R> & {}\n>;\n\n/** Adds a resource tile to the project overview inventory card. */\nexport type ProjectDashboardInventoryItem<\n  T extends K8sKind = K8sKind,\n  R extends { [key: string]: K8sResourceCommon[] } = { [key: string]: K8sResourceCommon[] }\n> = ExtensionDeclaration<\n  'console.dashboards/project/overview/item',\n  DashboardsOverviewInventoryItemProperties<T, R> & {}\n>;\n\n/** Adds an activity to the Activity Card of Overview Dashboard where the triggering of activity is based on watching a K8s resource. */\nexport type DashboardsOverviewResourceActivity<\n  T extends K8sResourceCommon = K8sResourceCommon\n> = ExtensionDeclaration<\n  'console.dashboards/overview/activity/resource',\n  {\n    /** The utilization item to be replaced. */\n    k8sResource: CodeRef<FirehoseResource & { isList: true }>;\n    /** Function which determines if the given resource represents the action. If not defined, every resource represents activity. */\n    isActivity?: CodeRef<(resource: T) => boolean>;\n    /** Timestamp for the given action, which will be used for ordering. */\n    getTimestamp?: CodeRef<(resource: T) => Date>;\n    /** The action component. */\n    component: CodeRef<React.ComponentType<K8sActivityProps<T>>>;\n  }\n>;\n\n/** Adds an activity to the Activity Card of Prometheus Overview Dashboard where the triggering of activity is based on watching a K8s resource. */\nexport type DashboardsOverviewPrometheusActivity = ExtensionDeclaration<\n  'console.dashboards/overview/prometheus/activity/resource',\n  {\n    /** Queries to watch */\n    queries: string[];\n    /** Function which determines if the given resource represents the action. If not defined, every resource represents activity. */\n    isActivity?: CodeRef<(results: PrometheusResponse[]) => boolean>;\n    /** The action component. */\n    component: CodeRef<React.ComponentType<PrometheusActivityProps>>;\n  }\n>;\n\n// Type guards\n\nexport const isDashboardsTab = (e: Extension): e is DashboardsTab =>\n  e.type === 'console.dashboards/tab';\n\nexport const isDashboardsCard = (e: Extension): e is DashboardsCard =>\n  e.type === 'console.dashboards/card';\n\nexport const isDashboardsOverviewHealthPrometheusSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthPrometheusSubsystem =>\n  e.type === 'console.dashboards/overview/health/prometheus';\n\nexport const isResolvedDashboardsOverviewHealthPrometheusSubsystem = (\n  e: Extension,\n): e is ResolvedExtension<DashboardsOverviewHealthPrometheusSubsystem> =>\n  e.type === 'console.dashboards/overview/health/prometheus';\n\nexport const isDashboardsOverviewHealthURLSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthURLSubsystem => e.type === 'console.dashboards/overview/health/url';\n\nexport const isResolvedDashboardsOverviewHealthURLSubsystem = (\n  e: Extension,\n): e is ResolvedExtension<DashboardsOverviewHealthURLSubsystem> =>\n  e.type === 'console.dashboards/overview/health/url';\n\nexport const isDashboardsOverviewHealthResourceSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthResourceSubsystem =>\n  e.type === 'console.dashboards/overview/health/resource';\n\nexport const isResolvedDashboardsOverviewHealthResourceSubsystem = (\n  e: Extension,\n): e is ResolvedExtension<DashboardsOverviewHealthResourceSubsystem> =>\n  e.type === 'console.dashboards/overview/health/resource';\n\nexport const isDashboardsOverviewHealthOperator = (\n  e: Extension,\n): e is DashboardsOverviewHealthOperator =>\n  e.type === 'console.dashboards/overview/health/operator';\n\nexport const isResolvedDashboardsOverviewHealthOperator = (\n  e: Extension,\n): e is ResolvedExtension<DashboardsOverviewHealthOperator> =>\n  e.type === 'console.dashboards/overview/health/operator';\n\nexport const isDashboardsInventoryItemGroup = (e: Extension): e is DashboardsInventoryItemGroup =>\n  e.type === 'console.dashboards/overview/inventory/item/group';\n\nexport const isDashboardsOverviewInventoryItem = (\n  e: Extension,\n): e is DashboardsOverviewInventoryItem => e.type === 'console.dashboards/overview/inventory/item';\n\nexport const isDashboardsOverviewInventoryItemReplacement = (\n  e: Extension,\n): e is DashboardsOverviewInventoryItemReplacement =>\n  e.type === 'console.dashboards/overview/inventory/item/replacement';\n\nexport const isProjectDashboardInventoryItem = (e: Extension): e is ProjectDashboardInventoryItem =>\n  e.type === 'console.dashboards/project/overview/item';\n\nexport const isDashboardsOverviewResourceActivity = (\n  e: Extension,\n): e is DashboardsOverviewResourceActivity =>\n  e.type === 'console.dashboards/overview/activity/resource';\n\nexport const isDashboardsOverviewPrometheusActivity = (\n  e: Extension,\n): e is DashboardsOverviewPrometheusActivity =>\n  e.type === 'console.dashboards/overview/prometheus/activity/resource';\n\nexport type DashboardsOverviewHealthSubsystem =\n  | DashboardsOverviewHealthURLSubsystem\n  | DashboardsOverviewHealthPrometheusSubsystem\n  | DashboardsOverviewHealthResourceSubsystem\n  | DashboardsOverviewHealthOperator;\n\nexport const isDashboardsOverviewHealthSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthSubsystem =>\n  isDashboardsOverviewHealthURLSubsystem(e) ||\n  isDashboardsOverviewHealthPrometheusSubsystem(e) ||\n  isDashboardsOverviewHealthResourceSubsystem(e) ||\n  isDashboardsOverviewHealthOperator(e);\n\ntype DashboardsOverviewInventoryItemProperties<\n  T extends K8sKind = K8sKind,\n  R extends { [key: string]: K8sResourceCommon[] } = { [key: string]: K8sResourceCommon[] }\n> = {\n  /** The model for `resource` which will be fetched. Used to get the model's `label` or `abbr`. */\n  model: CodeRef<T>;\n  /** Function which maps various statuses to groups. */\n  mapper?: CodeRef<StatusGroupMapper<T, R>>;\n  /** Additional resources which will be fetched and passed to the `mapper` function. */\n  additionalResources?: CodeRef<WatchK8sResources<R>>;\n};\n","import { ExtensionK8sModel } from '../api/common-types';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\n/** Gives full control over Console feature flags. */\nexport type FeatureFlag = ExtensionDeclaration<\n  'console.flag',\n  {\n    /** Used to set/unset arbitrary feature flags. */\n    handler: CodeRef<(callback: SetFeatureFlag) => void>;\n  }\n>;\n\n/** Adds new Console feature flag driven by the presence of a CRD on the cluster. */\nexport type ModelFeatureFlag = ExtensionDeclaration<\n  'console.flag/model',\n  {\n    /** The name of the flag to set once the CRD is detected. */\n    flag: string;\n    /** The model which refers to a `CustomResourceDefinition`. */\n    model: ExtensionK8sModel;\n  }\n>;\n\n// Type guards\n\nexport const isFeatureFlag = (e: Extension): e is FeatureFlag => e.type === 'console.flag';\n\nexport const isModelFeatureFlag = (e: Extension): e is ModelFeatureFlag =>\n  e.type === 'console.flag/model';\n\n// Support types\n\nexport type SetFeatureFlag = (flag: string, enabled: boolean) => void;\n","import { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\nexport type FileUpload = ExtensionDeclaration<\n  'console.file-upload',\n  {\n    /** Supported file extensions. */\n    fileExtensions: string[];\n    /** Function which handles the file drop action. */\n    handler: CodeRef<FileUploadHandler>;\n  }\n>;\n\n// Type guards\n\nexport const isFileUpload = (e: Extension): e is FileUpload => e.type === 'console.file-upload';\n\n// Support types\n\nexport type FileUploadHandler = (file: File, namespace: string) => void;\n","import { ExtensionK8sModel } from '../api/common-types';\nimport { Extension, ExtensionDeclaration } from '../types';\n\ntype NavItemProperties = {\n  /** A unique identifier for this item. */\n  id: string;\n  /** The perspective ID to which this item belongs to. If not specified, contributes to the default perspective. */\n  perspective?: string;\n  /** Navigation section to which this item belongs to. If not specified, render this item as a top level link. */\n  section?: string;\n  /** Adds data attributes to the DOM. */\n  dataAttributes?: { [key: string]: string };\n  /** Mark this item as active when the URL starts with one of these paths. */\n  startsWith?: string[];\n  /** Insert this item before the item referenced here. For arrays, the first one found in order is used. */\n  insertBefore?: string | string[];\n  /** Insert this item after the item referenced here. For arrays, the first one found in order is used. `insertBefore` takes precedence. */\n  insertAfter?: string | string[];\n};\n\nexport type NavItem = ExtensionDeclaration<\n  'console.navigation/href',\n  NavItemProperties & {\n    name: string;\n  }\n>;\n\nexport type HrefNavItem = ExtensionDeclaration<\n  'console.navigation/href',\n  NavItemProperties & {\n    /** The name of this item. */\n    name: string;\n    /** The link href value. */\n    href: string;\n    /** if true, adds /ns/active-namespace to the end */\n    namespaced?: boolean;\n    /** if true, adds /k8s/ns/active-namespace to the begining */\n    prefixNamespaced?: boolean;\n  }\n>;\n\nexport type ResourceNSNavItem = ExtensionDeclaration<\n  'console.navigation/resource-ns',\n  NavItemProperties & {\n    /** Overrides the default name. If not supplied the name of the link will equal the plural value of the model. */\n    name?: string;\n    /** The model for which this nav item links to. */\n    model: ExtensionK8sModel;\n  }\n>;\n\nexport type ResourceClusterNavItem = ExtensionDeclaration<\n  'console.navigation/resource-cluster',\n  NavItemProperties & {\n    /** Overrides the default name. If not supplied the name of the link will equal the plural value of the model. */\n    name?: string;\n    /** The model for which this nav item links to. */\n    model: ExtensionK8sModel;\n  }\n>;\n\nexport type Separator = ExtensionDeclaration<\n  'console.navigation/separator',\n  Omit<NavItemProperties, 'startsWith'>\n>;\n\nexport type NavSection = ExtensionDeclaration<\n  'console.navigation/section',\n  Omit<NavItemProperties, 'startsWith' | 'section'> & {\n    /** Name of this section. If not supplied, only a separator will be shown above the section. */\n    name?: string;\n  }\n>;\n\n// Type guards\n\nexport const isHrefNavItem = (e: Extension): e is HrefNavItem =>\n  e.type === 'console.navigation/href';\n\nexport const isResourceNSNavItem = (e: Extension): e is ResourceNSNavItem =>\n  e.type === 'console.navigation/resource-ns';\n\nexport const isResourceClusterNavItem = (e: Extension): e is ResourceClusterNavItem =>\n  e.type === 'console.navigation/resource-cluster';\n\nexport const isSeparator = (e: Extension): e is Separator =>\n  e.type === 'console.navigation/separator';\n\nexport const isNavSection = (e: Extension): e is NavSection =>\n  e.type === 'console.navigation/section';\n\nexport const isNavItem = (e: Extension): e is NavItem => {\n  return isHrefNavItem(e) || isResourceNSNavItem(e) || isResourceClusterNavItem(e);\n};\n","import { RouteComponentProps } from 'react-router';\nimport { ExtensionK8sGroupKindModel, ExtensionK8sModel } from '../api/common-types';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\ntype ResourcePageProperties = {\n  /** The model for which this resource page links to. */\n  model: ExtensionK8sGroupKindModel;\n  /** The component to be rendered when the route matches. */\n  component: CodeRef<\n    React.ComponentType<{\n      match: RouteComponentProps['match'];\n      /** The namespace for which this resource page links to. */\n      namespace: string;\n      /** The model for which this resource page links to. */\n      model: ExtensionK8sModel;\n    }>\n  >;\n};\n\ntype RoutePageProperties = {\n  /** The perspective to which this page belongs to. If not specified, contributes to all perspectives. */\n  perspective?: string;\n  /** The component to be rendered when the route matches. */\n  component: CodeRef<React.ComponentType<RouteComponentProps>>;\n  /** Valid URL path or array of paths that `path-to-regexp@^1.7.0` understands. */\n  path: string | string[];\n  /** When true, will only match if the path matches the `location.pathname` exactly. */\n  exact?: boolean;\n};\n\n/** Adds new page to Console router. */\nexport type RoutePage = ExtensionDeclaration<'console.page/route', RoutePageProperties>;\n\n/** Adds new resource list page to Console router. */\nexport type ResourceListPage = ExtensionDeclaration<\n  'console.page/resource/list',\n  ResourcePageProperties & {}\n>;\n\n/** Adds new resource details page to Console router. */\nexport type ResourceDetailsPage = ExtensionDeclaration<\n  'console.page/resource/details',\n  ResourcePageProperties & {}\n>;\n\n/** Adds new resource tab page to Console router. */\nexport type ResourceTabPage = ExtensionDeclaration<\n  'console.page/resource/tab',\n  Omit<ResourcePageProperties, 'component'> & {\n    /** The component to be rendered when the route matches. */\n    component: CodeRef<React.ComponentType<RouteComponentProps>>;\n    /** The name of the tab. */\n    name: string;\n    /** The optional href for the tab link. If not provided, the first `path` is used. */\n    href?: string;\n    /** When true, will only match if the path matches the `location.pathname` exactly. */\n    exact?: boolean;\n  }\n>;\n\n/** Adds new standalone page (rendered outside the common page layout) to Console router. */\nexport type StandaloneRoutePage = ExtensionDeclaration<\n  'console.page/route/standalone',\n  Omit<RoutePageProperties, 'perspective'>\n>;\n\n// Type guards\n\nexport const isRoutePage = (e: Extension): e is RoutePage => e.type === 'console.page/route';\n\nexport const isStandaloneRoutePage = (e: Extension): e is StandaloneRoutePage =>\n  e.type === 'console.page/route/standalone';\n\nexport const isResourceListPage = (e: Extension): e is ResourceListPage =>\n  e.type === 'console.page/resource/list';\n\nexport const isResourceDetailsPage = (e: Extension): e is ResourceDetailsPage =>\n  e.type === 'console.page/resource/details';\n\nexport const isResourceTabPage = (e: Extension): e is ResourceTabPage =>\n  e.type === 'console.page/resource/tab';\n","import * as React from 'react';\nimport { ExtensionK8sModel } from '../api/common-types';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\n// Align type with React.lazy\ntype LazyComponent = { default: React.ComponentType };\n\nexport type Perspective = ExtensionDeclaration<\n  'console.perspective',\n  {\n    /** The perspective identifier. */\n    id: string;\n    /** The perspective display name. */\n    name: string;\n    /** The perspective display icon. */\n    icon: CodeRef<LazyComponent>;\n    /** Whether the perspective is the default. There can only be one default. */\n    default?: boolean;\n    /** Default pinned resources on the nav */\n    defaultPins?: ExtensionK8sModel[];\n    /** The function to get perspective landing page URL. */\n    landingPageURL: CodeRef<(flags: { [key: string]: boolean }, isFirstVisit: boolean) => string>;\n    /** The function to get redirect URL for import flow. */\n    importRedirectURL: CodeRef<(namespace: string) => string>;\n    /** The hook to detect default perspective */\n    usePerspectiveDetection?: CodeRef<() => [boolean, boolean]>; // [enablePerspective: boolean, loading: boolean]\n  }\n>;\n\nexport const isPerspective = (e: Extension): e is Perspective => {\n  return e.type === 'console.perspective';\n};\n","import { Extension, ExtensionDeclaration, CodeRef } from '../types';\nimport { K8sResourceCommon } from './console-types';\n\nexport type PVCCreateProp = ExtensionDeclaration<\n  'console.pvc/create-prop',\n  {\n    /** Label for the create prop action. */\n    label: string;\n    /** Path for the create prop action. */\n    path: string;\n  }\n>;\n\nexport type PVCAlert = ExtensionDeclaration<\n  'console.pvc/alert',\n  {\n    /** The alert component. */\n    alert: CodeRef<React.ComponentType<{ pvc: K8sResourceCommon }>>;\n  }\n>;\n\nexport type PVCStatus = ExtensionDeclaration<\n  'console.pvc/status',\n  {\n    /** Priority for the status component. Bigger value means higher priority. */\n    priority: number;\n    /** The status component. */\n    status: CodeRef<React.ComponentType<{ pvc: K8sResourceCommon }>>;\n    /** Predicate that tells whether to render the status component or not. */\n    predicate: CodeRef<(pvc: K8sResourceCommon) => boolean>;\n  }\n>;\n\nexport type PVCDelete = ExtensionDeclaration<\n  'console.pvc/delete',\n  {\n    /** Predicate that tells whether to use the extension or not. */\n    predicate: CodeRef<(pvc: K8sResourceCommon) => boolean>;\n    /** Method for the PVC delete operation. */\n    onPVCKill: CodeRef<(pvc: K8sResourceCommon) => Promise<void>>;\n    /** Alert component to show additional information. */\n    alert: CodeRef<React.ComponentType<{ pvc: K8sResourceCommon }>>;\n  }\n>;\n\n// Type guards\n\nexport const isPVCCreateProp = (e: Extension): e is PVCCreateProp =>\n  e.type === 'console.pvc/create-prop';\n\nexport const isPVCAlert = (e: Extension): e is PVCAlert => e.type === 'console.pvc/alert';\n\nexport const isPVCStatus = (e: Extension): e is PVCStatus => e.type === 'console.pvc/status';\n\nexport const isPVCDelete = (e: Extension): e is PVCDelete => e.type === 'console.pvc/delete';\n","import { Reducer } from 'redux';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\n/** Adds new reducer to Console Redux store which operates on `plugins.<scope>` substate. */\nexport type ReduxReducer = ExtensionDeclaration<\n  'console.redux-reducer',\n  {\n    /** The key to represent the reducer-managed substate within the Redux state object. */\n    scope: string;\n    /** The reducer function, operating on the reducer-managed substate. */\n    reducer: CodeRef<Reducer>;\n  }\n>;\n\n// Type guards\n\nexport const isReduxReducer = (e: Extension): e is ReduxReducer =>\n  e.type === 'console.redux-reducer';\n","import { ExtensionK8sGroupModel } from '../api/common-types';\nimport { Extension, ExtensionDeclaration } from '../types';\n\n/** Customize the display of models by overriding values retrieved and generated through API discovery. */\nexport type ModelMetadata = ExtensionDeclaration<\n  'console.resource-metadata',\n  {\n    /** The model to customize. May specify only a group, or optional version and kind. */\n    model: ExtensionK8sGroupModel;\n    /** Whether to consider this model reference as tech preview or dev preview. */\n    badge?: 'tech' | 'dev';\n    /** The color to associate to this model. */\n    color?: string;\n    /** Override the label. Requires `kind` be provided. */\n    label?: string;\n    /** Override the plural label. Requires `kind` be provided. */\n    labelPlural?: string;\n    /** Customize the abbreviation. Defaults to All uppercase chars in the kind up to 4 characters long. Requires `kind` be provided. */\n    abbr?: string;\n  }\n>;\n\n// Type guards\n\nexport const isModelMetadata = (e: Extension): e is ModelMetadata =>\n  e.type === 'console.resource-metadata';\n","import { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\nexport type TelemetryListener = ExtensionDeclaration<\n  'console.telemetry/listener',\n  {\n    /** Listen for telemetry events */\n    listener: CodeRef<TelemetryEventListener>;\n  }\n>;\n\n// P should be valid JSON\nexport type TelemetryEventListener = <P = any>(eventType: string, properties?: P) => void;\n\n// Type guards\n\nexport const isTelemetryListener = (e: Extension): e is TelemetryListener => {\n  return e.type === 'console.telemetry/listener';\n};\n","import { ExtensionK8sModel } from '../api/common-types';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\n/** YAML templates for editing resources via the yaml editor. */\nexport type YAMLTemplate = ExtensionDeclaration<\n  'console.yaml-template',\n  {\n    /** Model associated with the template. */\n    model: ExtensionK8sModel;\n    /** The YAML template. */\n    template: CodeRef<string>;\n    /** The name of the template. Use the name `default` to mark this as the default template. */\n    name: string | 'default';\n  }\n>;\n\n// Type guards\n\nexport const isYAMLTemplate = (e: Extension): e is YAMLTemplate =>\n  e.type === 'console.yaml-template';\n","import { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\nexport type AlertAction = ExtensionDeclaration<\n  'console.alert-action',\n  {\n    /* Alert name as defined by `alert.rule.name` property */\n    alert: string;\n    /* Action text */\n    text: string;\n    /* Function to perform side effect */\n    action: CodeRef<(alert) => void>;\n  }\n>;\n\nexport const isAlertAction = (e: Extension): e is AlertAction => e.type === 'console.alert-action';\n","import { ButtonProps } from '@patternfly/react-core';\nimport { TableGridBreakpoint, OnSelect, SortByDirection, ICell } from '@patternfly/react-table';\nimport { RouteComponentProps } from 'react-router';\nimport {\n  ExtensionK8sGroupKindModel,\n  K8sKind,\n  PrometheusLabels,\n  PrometheusValue,\n  ResolvedExtension,\n} from '../api/common-types';\nimport { Extension, ExtensionTypeGuard } from '../types';\n\nexport type OwnerReference = {\n  name: string;\n  kind: string;\n  uid: string;\n  apiVersion: string;\n  controller?: boolean;\n  blockOwnerDeletion?: boolean;\n};\n\nexport type ObjectReference = {\n  kind?: string;\n  namespace?: string;\n  name?: string;\n  uid?: string;\n  apiVersion?: string;\n  resourceVersion?: string;\n  fieldPath?: string;\n};\n\nexport type ObjectMetadata = {\n  annotations?: { [key: string]: string };\n  clusterName?: string;\n  creationTimestamp?: string;\n  deletionGracePeriodSeconds?: number;\n  deletionTimestamp?: string;\n  finalizers?: string[];\n  generateName?: string;\n  generation?: number;\n  labels?: { [key: string]: string };\n  managedFields?: any[];\n  name?: string;\n  namespace?: string;\n  ownerReferences?: OwnerReference[];\n  resourceVersion?: string;\n  uid?: string;\n};\n\n// Properties common to (almost) all Kubernetes resources.\nexport type K8sResourceCommon = {\n  apiVersion?: string;\n  kind?: string;\n  metadata?: ObjectMetadata;\n};\n\nexport type K8sVerb =\n  | 'create'\n  | 'get'\n  | 'list'\n  | 'update'\n  | 'patch'\n  | 'delete'\n  | 'deletecollection'\n  | 'watch';\n\nexport type AccessReviewResourceAttributes = {\n  group?: string;\n  resource?: string;\n  subresource?: string;\n  verb?: K8sVerb;\n  name?: string;\n  namespace?: string;\n};\n\nexport type MatchExpression = {\n  key: string;\n  operator: 'Exists' | 'DoesNotExist' | 'In' | 'NotIn' | 'Equals' | 'NotEqual';\n  values?: string[];\n  value?: string;\n};\n\nexport type MatchLabels = {\n  [key: string]: string;\n};\n\nexport type Selector = {\n  matchLabels?: MatchLabels;\n  matchExpressions?: MatchExpression[];\n};\n\n/**\n * GroupVersionKind unambiguously identifies a kind.\n * https://godoc.org/k8s.io/apimachinery/pkg/runtime/schema#GroupVersionKind\n * TODO: Change this to a regex-type if it ever becomes a thing (https://github.com/Microsoft/TypeScript/issues/6579)\n */\nexport type GroupVersionKind = string;\n\n/**\n * The canonical, unique identifier for a Kubernetes resource type.\n * Maintains backwards-compatibility with references using the `kind` string field.\n */\nexport type K8sResourceKindReference = GroupVersionKind | string;\n\nenum InventoryStatusGroup {\n  WARN = 'WARN',\n  ERROR = 'ERROR',\n  PROGRESS = 'PROGRESS',\n  NOT_MAPPED = 'NOT_MAPPED',\n  UNKNOWN = 'UNKNOWN',\n}\n\ntype StatusGroup = {\n  [key in InventoryStatusGroup | string]: {\n    filterType?: string;\n    statusIDs: string[];\n    count: number;\n  };\n};\n\nexport type StatusGroupMapper<\n  T extends K8sResourceCommon = K8sResourceCommon,\n  R extends { [key: string]: K8sResourceCommon[] } = { [key: string]: K8sResourceCommon[] }\n> = (resources: T[], additionalResources?: R) => StatusGroup;\n\nexport enum HealthState {\n  OK = 'OK',\n  ERROR = 'ERROR',\n  WARNING = 'WARNING',\n  LOADING = 'LOADING',\n  UNKNOWN = 'UNKNOWN',\n  UPDATING = 'UPDATING',\n  PROGRESS = 'PROGRESS',\n  UPGRADABLE = 'UPGRADABLE',\n  NOT_AVAILABLE = 'NOT_AVAILABLE',\n}\n\n// Only covers range and instant vector responses for now.\nexport type PrometheusResult = {\n  metric: PrometheusLabels;\n  values?: PrometheusValue[];\n  value?: PrometheusValue;\n};\n\nexport type PrometheusData = {\n  resultType: 'matrix' | 'vector' | 'scalar' | 'string';\n  result: PrometheusResult[];\n};\n\nexport type PrometheusResponse = {\n  status: string;\n  data: PrometheusData;\n  errorType?: string;\n  error?: string;\n  warnings?: string[];\n};\n\nexport type WatchK8sResource = {\n  kind: K8sResourceKindReference;\n  name?: string;\n  namespace?: string;\n  isList?: boolean;\n  selector?: Selector;\n  namespaced?: boolean;\n  limit?: number;\n  fieldSelector?: string;\n  optional?: boolean;\n};\n\nexport type ResourcesObject = { [key: string]: K8sResourceCommon | K8sResourceCommon[] };\n\nexport type WatchK8sResultsObject<R extends K8sResourceCommon | K8sResourceCommon[]> = {\n  data: R;\n  loaded: boolean;\n  loadError: any;\n};\n\nexport type WatchK8sResults<R extends ResourcesObject> = {\n  [k in keyof R]: WatchK8sResultsObject<R[k]>;\n};\n\nexport type WatchK8sResources<R extends ResourcesObject> = {\n  [k in keyof R]: WatchK8sResource;\n};\n\nexport type WatchK8sResourcesGeneric = {\n  [key: string]: {\n    model?: ExtensionK8sGroupKindModel;\n    opts?: Partial<WatchK8sResource>;\n  };\n};\n\nexport type FirehoseResource = {\n  kind: K8sResourceKindReference;\n  name?: string;\n  namespace?: string;\n  isList?: boolean;\n  selector?: Selector;\n  prop: string;\n  namespaced?: boolean;\n  optional?: boolean;\n  limit?: number;\n  fieldSelector?: string;\n};\n\nexport type FirehoseResult<\n  R extends K8sResourceCommon | K8sResourceCommon[] = K8sResourceCommon[]\n> = {\n  loaded: boolean;\n  loadError: string;\n  optional?: boolean;\n  data: R;\n  kind?: string;\n};\n\nexport type FirehoseResourcesResult = {\n  [key: string]: FirehoseResult<K8sResourceCommon | K8sResourceCommon[]>;\n};\n\nexport type WatchK8sResult<R extends K8sResourceCommon | K8sResourceCommon[]> = [R, boolean, any];\n\nexport type UseK8sWatchResource = <R extends K8sResourceCommon | K8sResourceCommon[]>(\n  initResource: WatchK8sResource | null,\n) => WatchK8sResult<R>;\n\nexport type UseK8sWatchResources = <R extends ResourcesObject>(\n  initResources: WatchK8sResources<R>,\n) => WatchK8sResults<R>;\n\nexport type UseResolvedExtensions = <E extends Extension>(\n  ...typeGuards: ExtensionTypeGuard<E>[]\n) => [ResolvedExtension<E>[], boolean, any[]];\n\nexport type ConsoleFetch = (\n  url: string,\n  options?: RequestInit,\n  timeout?: number,\n) => Promise<Response>;\n\nexport type ConsoleFetchJSON<T = any> = {\n  (url: string, method?: string, options?: RequestInit, timeout?: number): Promise<T>;\n  delete(url: string, json?: any, options?: RequestInit, timeout?: number): Promise<T>;\n  post(url: string, json: any, options?: RequestInit, timeout?: number): Promise<T>;\n  put(url: string, json: any, options?: RequestInit, timeout?: number): Promise<T>;\n  patch(url: string, json: any, options?: RequestInit, timeout?: number): Promise<T>;\n};\n\nexport type ConsoleFetchText = (...args: Parameters<ConsoleFetch>) => Promise<string>;\n\n/* Horizontal Nav Types */\nexport type NavPage = {\n  href?: string;\n  path?: string;\n  name: string;\n  component: React.ComponentType<RouteComponentProps>;\n};\n\nexport type HorizontalNavProps = {\n  resource?: K8sResourceCommon;\n  pages: NavPage[];\n};\n\nexport type TableColumn<D> = ICell & {\n  title: string;\n  id: string;\n  additional?: boolean;\n  sort?: ((data: D[], sortDirection: SortByDirection) => D[]) | string;\n};\n\nexport type RowProps<D, R extends any = {}> = {\n  obj: D;\n  rowData: R;\n  activeColumnIDs: Set<string>;\n};\n\ntype VirtualizedTableProps<D, R extends any = {}> = {\n  data: D[];\n  unfilteredData: D[];\n  loaded: boolean;\n  loadError: any;\n  columns: TableColumn<D>[];\n  Row: React.ComponentType<RowProps<D, R>>;\n  NoDataEmptyMsg?: React.ComponentType<{}>;\n  EmptyMsg?: React.ComponentType<{}>;\n  scrollNode?: () => HTMLElement;\n  onSelect?: OnSelect;\n  label?: string;\n  'aria-label'?: string;\n  gridBreakPoint?: TableGridBreakpoint;\n  rowData?: R;\n};\n\nexport type VirtualizedTableFC = <D, R extends any = {}>(\n  props: VirtualizedTableProps<D, R>,\n) => JSX.Element;\n\nexport type TableDataProps = {\n  id: string;\n  activeColumnIDs: Set<string>;\n  className?: string;\n};\n\nexport type UseActiveColumns = <D = any>({\n  columns,\n  showNamespaceOverride,\n  columnManagementID,\n}: {\n  columns: TableColumn<D>[];\n  showNamespaceOverride: boolean;\n  columnManagementID: string;\n}) => [TableColumn<D>[], boolean];\n\nexport type ListPageHeaderProps = {\n  title: string;\n  helpText?: React.ReactNode;\n  badge?: React.ReactNode;\n};\n\nexport type CreateWithPermissionsProps = {\n  createAccessReview?: {\n    groupVersionKind: GroupVersionKind;\n    namespace?: string;\n  };\n};\n\nexport type ListPageCreateProps = CreateWithPermissionsProps & {\n  groupVersionKind: GroupVersionKind;\n};\n\nexport type ListPageCreateLinkProps = CreateWithPermissionsProps & {\n  to: string;\n};\n\nexport type ListPageCreateButtonProps = CreateWithPermissionsProps & ButtonProps;\n\nexport type ListPageCreateDropdownProps = CreateWithPermissionsProps & {\n  items: {\n    [key: string]: React.ReactNode;\n  };\n  onClick: (item: string) => void;\n};\n\nexport type RowFilterItem = {\n  id: string;\n  title: string;\n  hideIfEmpty?: string;\n};\n\nexport type FilterValue = {\n  selected?: string[];\n  all?: string[];\n};\n\ntype RowFilterBase<R> = {\n  filterGroupName: string;\n  type: string;\n  items: RowFilterItem[];\n  filter: (input: FilterValue, obj: R) => boolean;\n  defaultSelected?: string[];\n};\n\nexport type RowMatchFilter<R = any> = RowFilterBase<R> & {\n  isMatch: (obj: R, id: string) => boolean;\n};\n\nexport type RowReducerFilter<R = any> = RowFilterBase<R> & {\n  reducer: (obj: R) => React.ReactText;\n};\n\nexport type RowFilter<R = any> = RowMatchFilter<R> | RowReducerFilter<R>;\n\nexport type ColumnLayout = {\n  id: string;\n  columns: ManagedColumn[];\n  selectedColumns: Set<string>;\n  showNamespaceOverride?: boolean;\n  type: string;\n};\n\nexport type ManagedColumn = {\n  id: string;\n  title: string;\n  additional?: boolean;\n};\n\nexport type OnFilterChange = (type: string, value: FilterValue) => void;\n\nexport type ListPageFilterProps<D = any> = {\n  data: D;\n  loaded: boolean;\n  rowFilters?: RowFilter[];\n  nameFilterPlaceholder?: string;\n  labelFilterPlaceholder?: string;\n  hideNameLabelFilters?: boolean;\n  hideLabelFilter?: boolean;\n  columnLayout?: ColumnLayout;\n  onFilterChange: OnFilterChange;\n  hideColumnManagement?: boolean;\n};\n\nexport type UseListPageFilter = <D, R>(\n  data: D[],\n  rowFilters?: RowFilter<R>[],\n  staticFilters?: { [key: string]: FilterValue },\n) => [D[], D[], OnFilterChange];\n\nexport type ResourceLinkProps = {\n  kind: GroupVersionKind;\n  className?: string;\n  displayName?: string;\n  inline?: boolean;\n  linkTo?: boolean;\n  name?: string;\n  namespace?: string;\n  hideIcon?: boolean;\n  title?: string;\n  dataTest?: string;\n  onClick?: () => void;\n};\n\nexport type UseK8sModel = (groupVersionKind?: GroupVersionKind) => [K8sKind, boolean];\nexport type UseK8sModels = () => [{ [key: string]: K8sKind }, boolean];\n\nexport type PerspectiveType = string;\n\nexport type UseActivePerspective = () => [\n  PerspectiveType,\n  React.Dispatch<React.SetStateAction<PerspectiveType>>,\n];\n\nexport type WithActivePerspectiveProps = {\n  activePerspective: PerspectiveType;\n  setActivePerspective: React.Dispatch<React.SetStateAction<PerspectiveType>>;\n};\n\nexport type WithActivePerspectiveHOC = <Props extends WithActivePerspectiveProps>(\n  Component: React.ComponentType<Props>,\n) => (props: Omit<Props, keyof WithActivePerspectiveProps>) => React.ReactElement<Props>;\n","import { RouteComponentProps } from 'react-router';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\nexport type StorageProvider = ExtensionDeclaration<\n  'console.storage-provider',\n  {\n    name: string;\n    Component: CodeRef<React.ComponentType<Partial<RouteComponentProps>>>;\n  }\n>;\n\nexport const isStorageProvider = (e: Extension): e is StorageProvider =>\n  e.type === 'console.storage-provider';\n","import * as React from 'react';\nimport { ExtensionHook, ExtensionK8sKindVersionModel } from '../api/common-types';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\nimport { AccessReviewResourceAttributes } from './console-types';\n\n/** ActionProvider contributes a hook that returns list of actions for specific context */\nexport type ActionProvider = ExtensionDeclaration<\n  'console.action/provider',\n  {\n    /** The context ID helps to narrow the scope of contributed actions to a particular area of the application. Ex - topology, helm */\n    contextId: string | 'resource';\n    /** A react hook which returns actions for the given scope.\n     * If contextId = `resource` then the scope will always be a K8s resource object\n     * */\n    provider: CodeRef<ExtensionHook<Action[]>>;\n  }\n>;\n\n/** ResourceActionProvider contributes a hook that returns list of actions for specific resource model */\nexport type ResourceActionProvider = ExtensionDeclaration<\n  'console.action/resource-provider',\n  {\n    /** The model for which this provider provides actions for. */\n    model: ExtensionK8sKindVersionModel;\n    /** A react hook which returns actions for the given resource model */\n    provider: CodeRef<ExtensionHook<Action[]>>;\n  }\n>;\n\n/** ActionGroup contributes an action group that can also be a submenu */\nexport type ActionGroup = ExtensionDeclaration<\n  'console.action/group',\n  {\n    /** ID used to identify the action section. */\n    id: string;\n    /** The label to display in the UI.\n     * Required for submenus.\n     * */\n    label?: string;\n    /** Whether this group should be displayed as submenu */\n    submenu?: boolean;\n    /** Insert this item before the item referenced here.\n     * For arrays, the first one found in order is used.\n     * */\n    insertBefore?: string | string[];\n    /** Insert this item after the item referenced here.\n     * For arrays, the first one found in order is used.\n     * insertBefore takes precedence.\n     * */\n    insertAfter?: string | string[];\n  }\n>;\n\n/** ActionFilter can be used to filter an action */\nexport type ActionFilter = ExtensionDeclaration<\n  'console.action/filter',\n  {\n    /** The context ID helps to narrow the scope of contributed actions to a particular area of the application. Ex - topology, helm */\n    contextId: string | 'resource';\n    /** A function which will filter actions based on some conditions.\n     * scope: The scope in which actions should be provided for.\n     * Note: hook may be required if we want to remove the ModifyCount action from a deployment with HPA\n     * */\n    filter: CodeRef<(scope: any, action: Action) => boolean>;\n  }\n>;\n\nexport type SupportedActionExtensions =\n  | ActionProvider\n  | ResourceActionProvider\n  | ActionGroup\n  | ActionFilter;\n\n// Type Guards\n\nexport const isActionProvider = (e: Extension): e is ActionProvider => {\n  return e.type === 'console.action/provider';\n};\n\nexport const isResourceActionProvider = (e: Extension): e is ResourceActionProvider => {\n  return e.type === 'console.action/resource-provider';\n};\n\nexport const isActionGroup = (e: Extension): e is ActionGroup => {\n  return e.type === 'console.action/group';\n};\n\nexport const isActionFilter = (e: Extension): e is ActionFilter => {\n  return e.type === 'console.action/filter';\n};\n\n// Support types\n\nexport type Action = {\n  /** A unique identifier for this action. */\n  id: string;\n  /** The label to display in the UI. */\n  label: string;\n  /** Executable callback or href.\n   * External links should automatically provide an external link icon on action.\n   * */\n  cta: (() => void) | { href: string; external?: boolean };\n  /** Whether the action is disabled. */\n  disabled?: boolean;\n  /** The tooltip for this action. */\n  tooltip?: string;\n  /** The icon for this action. */\n  icon?: string | React.ReactNode;\n  /** A `/` separated string where each segment denotes\n   * Eg. `add-to-project`, `menu-1/menu-2`\n   * */\n  path?: string;\n  /** Insert this item before the item referenced here.\n   * For arrays, the first one found in order is used.\n   * */\n  insertBefore?: string | string[];\n  /** Insert this item after the item referenced here.\n   * For arrays, the first one found in order is used.\n   * insertBefore takes precedence.\n   * */\n  insertAfter?: string | string[];\n  /** Describes the access check to perform. */\n  accessReview?: AccessReviewResourceAttributes;\n};\n","import { ExtensionK8sModel } from '../api/common-types';\nimport { CodeRef, Extension, ExtensionDeclaration } from '../types';\n\nexport type CreateResource = ExtensionDeclaration<\n  'console.resource/create',\n  {\n    /** The model for which this create resource page will be rendered. */\n    model: ExtensionK8sModel;\n    /** The component to be rendered when the model matches */\n    component: CodeRef<React.ComponentType<{ namespace?: string }>>;\n  }\n>;\n\n// Type guards\n\nexport const isCreateResource = (e: Extension): e is CreateResource =>\n  e.type === 'console.resource/create';\n","import * as React from 'react';\nimport { JSONSchema7Type } from 'json-schema';\nimport { Extension, ExtensionDeclaration, CodeRef } from '../types';\n\nexport enum UserPreferenceFieldType {\n  dropdown = 'dropdown',\n  checkbox = 'checkbox',\n  custom = 'custom',\n}\n\nexport type UserPreferenceDropdownField = {\n  type: UserPreferenceFieldType.dropdown;\n  userSettingsKey: string;\n  defaultValue?: string;\n  options: {\n    value: string;\n    label: string;\n  }[];\n};\n\nexport type UserPreferenceCheckboxFieldValue = string | number | boolean;\n\nexport type UserPreferenceCheckboxField = {\n  type: UserPreferenceFieldType.checkbox;\n  userSettingsKey: string;\n  label: string;\n  trueValue: UserPreferenceCheckboxFieldValue;\n  falseValue: UserPreferenceCheckboxFieldValue;\n  defaultValue?: UserPreferenceCheckboxFieldValue;\n};\n\nexport type UserPreferenceCustomField = {\n  type: UserPreferenceFieldType.custom;\n  component: CodeRef<React.ComponentType>;\n  props?: { [key: string]: JSONSchema7Type };\n};\n\nexport type UserPreferenceField =\n  | UserPreferenceDropdownField\n  | UserPreferenceCheckboxField\n  | UserPreferenceCustomField;\n\nexport type UserPreferenceGroup = ExtensionDeclaration<\n  'console.user-preference/group',\n  {\n    /** ID used to identify the user preference group. */\n    id: string;\n    /** The label of the user preference group */\n    label: string;\n    /** ID of user preference group before which this group should be placed */\n    insertBefore?: string;\n    /** ID of user preference group after which this group should be placed */\n    insertAfter?: string;\n  }\n>;\n\nexport type UserPreferenceItem = ExtensionDeclaration<\n  'console.user-preference/item',\n  {\n    /** ID used to identify the user preference item and referenced in insertAfter and insertBefore to define the item order. */\n    id: string;\n    /** IDs used to identify the user preference groups the item would belong to. */\n    groupId?: string;\n    /** The label of the user preference */\n    label: string;\n    /** The description of the user preference. */\n    description: string;\n    /** The input field options used to render the values to set the user preference. */\n    field: UserPreferenceField;\n    /** ID of user preference item before which this item should be placed */\n    insertBefore?: string;\n    /** ID of user preference item after which this item should be placed */\n    insertAfter?: string;\n  }\n>;\n\n// Type guards\n\nexport const isUserPreferenceItem = (e: Extension): e is UserPreferenceItem => {\n  return e.type === 'console.user-preference/item';\n};\n\nexport const isUserPreferenceGroup = (e: Extension): e is UserPreferenceGroup => {\n  return e.type === 'console.user-preference/group';\n};\n","/* eslint-disable */\n// import * as React from 'react';\nimport {\n  // UseK8sWatchResource,\n  // UseK8sWatchResources,\n  ConsoleFetch,\n  ConsoleFetchJSON,\n  ConsoleFetchText,\n  // HorizontalNavProps,\n  UseResolvedExtensions,\n  // VirtualizedTableFC,\n  // TableDataProps,\n  // UseActiveColumns,\n  // ListPageHeaderProps,\n  // ListPageCreateProps,\n  // ListPageCreateLinkProps,\n  // ListPageCreateButtonProps,\n  // ListPageCreateDropdownProps,\n  // ListPageFilterProps,\n  // UseListPageFilter,\n  // ResourceLinkProps,\n  // UseK8sModel,\n  // UseK8sModels,\n  UseActivePerspective,\n  WithActivePerspectiveHOC,\n} from '../extensions/console-types';\n\n// export const useK8sWatchResource: UseK8sWatchResource = require('@console/internal/components/utils/k8s-watch-hook')\n//   .useK8sWatchResource;\n// export const useK8sWatchResources: UseK8sWatchResources = require('@console/internal/components/utils/k8s-watch-hook')\n//   .useK8sWatchResources;\nexport const useResolvedExtensions: UseResolvedExtensions = require('@console/dynamic-plugin-sdk/src/api/useResolvedExtensions')\n  .useResolvedExtensions;\nexport const consoleFetch: ConsoleFetch = require('@console/dynamic-plugin-sdk/src/utils/fetch')\n  .consoleFetch;\nexport const consoleFetchJSON: ConsoleFetchJSON = require('@console/dynamic-plugin-sdk/src/utils/fetch')\n  .consoleFetchJSON;\nexport const consoleFetchText: ConsoleFetchText = require('@console/dynamic-plugin-sdk/src/utils/fetch')\n  .consoleFetchText;\n\nexport const useActivePerspective: UseActivePerspective = require('@console/dynamic-plugin-sdk/src/perspective/useActivePerspective')\n  .default;\nexport const withActivePerspective: WithActivePerspectiveHOC = require('@console/dynamic-plugin-sdk/src/perspective/withActivePerspective')\n  .default;\n\n/**\n * A component that creates a Navigation bar. It takes array of NavPage objects and renderes a NavBar.\n * Routing is handled as part of the component.\n * @example\n * const HomePage: React.FC = (props) => {\n *     const page = {\n *       href: '/home',\n *       name: 'Home',\n *       component: () => <>Home</>\n *     }\n *     return <HorizontalNav match={props.match} pages={[page]} />\n * }\n *\n * @param {object=} resource - The resource associated with this Navigation, an object of K8sResourceCommon type\n * @param {NavPage[]} pages - An array of page objects\n * @param {object} match - match object provided by React Router\n */\n// export const HorizontalNav: React.FC<HorizontalNavProps> = require('@console/internal/components/utils/horizontal-nav')\n//   .HorizontalNavFacade;\n// export const VirtualizedTable: VirtualizedTableFC = require('@console/internal/components/factory/Table/VirtualizedTable')\n//   .default;\n// export const TableData: React.FC<TableDataProps> = require('@console/internal/components/factory/Table/VirtualizedTable')\n//   .TableData;\n// export const useActiveColumns: UseActiveColumns = require('@console/internal/components/factory/Table/active-columns-hook')\n//   .useActiveColumns;\n// export const ListPageHeader: React.FC<ListPageHeaderProps> = require('@console/internal/components/factory/ListPage/ListPageHeader')\n//   .default;\n// export const ListPageCreate: React.FC<ListPageCreateProps> = require('@console/internal/components/factory/ListPage/ListPageCreate')\n//   .default;\n// export const ListPageCreateLink: React.FC<ListPageCreateLinkProps> = require('@console/internal/components/factory/ListPage/ListPageCreate')\n//   .ListPageCreateLink;\n// export const ListPageCreateButton: React.FC<ListPageCreateButtonProps> = require('@console/internal/components/factory/ListPage/ListPageCreate')\n//   .ListPageCreateButton;\n// export const ListPageCreateDropdown: React.FC<ListPageCreateDropdownProps> = require('@console/internal/components/factory/ListPage/ListPageCreate')\n//   .ListPageCreateDropdown;\n// export const ListPageBody: React.FC = require('@console/internal/components/factory/ListPage/ListPageBody')\n//   .default;\n// export const ListPageFilter: React.FC<ListPageFilterProps> = require('@console/internal/components/factory/ListPage/ListPageFilter')\n//   .default;\n// export const useListPageFilter: UseListPageFilter = require('@console/internal/components/factory/ListPage/filter-hook')\n//   .useListPageFilter;\n// export const ResourceLink: React.FC<ResourceLinkProps> = require('@console/internal/components/utils/resource-link')\n//   .ResourceLink;\n// export const useK8sModel: UseK8sModel = require('@console/shared/src/hooks/useK8sModel')\n//   .useK8sModel;\n// export const useK8sModels: UseK8sModels = require('@console/shared/src/hooks/useK8sModels')\n//   .useK8sModels;\n","import * as React from 'react';\nimport { PerspectiveType } from '../extensions';\n\nexport type PerspectiveContextType = {\n  activePerspective?: PerspectiveType;\n  setActivePerspective?: React.Dispatch<React.SetStateAction<PerspectiveType>>;\n};\n\nexport const PerspectiveContext = React.createContext<PerspectiveContextType>({});\n","import { useContext } from 'react';\nimport { UseActivePerspective } from '../extensions';\nimport { PerspectiveContext, PerspectiveContextType } from './perspective-context';\n\nconst useActivePerspective: UseActivePerspective = () => {\n  const { activePerspective, setActivePerspective } = useContext<PerspectiveContextType>(\n    PerspectiveContext,\n  );\n  return [activePerspective, setActivePerspective];\n};\n\nexport default useActivePerspective;\n","import * as React from 'react';\nimport { WithActivePerspectiveHOC } from '../extensions';\nimport useActivePerspective from './useActivePerspective';\n\n/**\n * RE: `props: any`.,, we needed to do this because TypeScript breaks down an `Omit` into a stand alone type which it\n * cannot infer is a subtype of the pre-Omit type. This makes the return statement throw an error as there might be a\n * confusion between the two types. `any` is a hack work around to get TS not to make that inference. For code sanity\n * the pre-Omit and post-Omit types are actually compatible and thus is not a real TS error due to the Omit props being\n * a standalone type.\n */\nconst withActivePerspective: WithActivePerspectiveHOC = (Component) => (props: any) => {\n  const [activePerspective, setActivePerspective] = useActivePerspective();\n  return (\n    <Component\n      {...props}\n      activePerspective={activePerspective}\n      setActivePerspective={setActivePerspective}\n    />\n  );\n};\n\nexport default withActivePerspective;\n","/**\n * Allows to easily extend a base class to create custom applicative errors.\n *\n * example:\n * ```\n * class HttpError extends CustomError {\n * \tpublic constructor(\n * \t\tpublic code: number,\n * \t\tmessage?: string,\n * \t) {\n * \t\tsuper(message)\n * \t}\n * }\n *\n * new HttpError(404, 'Not found')\n * ```\n */\nexport class CustomError extends Error {\n  name: string;\n\n  constructor(message?: string) {\n    super(message);\n    // set error name as constructor name, make it not enumerable to keep native Error behavior\n    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors\n    Object.defineProperty(this, 'name', {\n      value: new.target.name,\n      enumerable: false,\n      configurable: true,\n    });\n    // Use captureStackTrace when available to remove contructor from stack trace\n    // Add message to the stack trace\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(message).stack;\n    }\n    // fix the extended error prototype chain\n    // because typescript __extends implementation can't\n    // see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { CustomError } from './custom-error';\n\n/**\n * Http error\n *\n * Usage: throw HttpError.fromCode(404)\n */\nexport class HttpError extends CustomError {\n  protected static messages = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required', // RFC 7235\n    408: 'Request Timeout',\n    409: 'Conflict',\n    410: 'Gone',\n    411: 'Length Required',\n    412: 'Precondition Failed', // RFC 7232\n    413: 'Payload Too Large', // RFC 7231\n    414: 'URI Too Long', // RFC 7231\n    415: 'Unsupported Media Type',\n    416: 'Range Not Satisfiable', // RFC 7233\n    417: 'Expectation Failed',\n    418: \"I'm a teapot\", // RFC 2324\n    421: 'Misdirected Request', // RFC 7540\n    426: 'Upgrade Required',\n    428: 'Precondition Required', // RFC 6585\n    429: 'Too Many Requests', // RFC 6585\n    431: 'Request Header Fields Too Large', // RFC 6585\n    451: 'Unavailable For Legal Reasons', // RFC 7725\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Gateway Timeout',\n    505: 'HTTP Version Not Supported',\n    506: 'Variant Also Negotiates', // RFC 2295\n    510: 'Not Extended', // RFC 2774\n    511: 'Network Authentication Required', // RFC 6585\n  };\n\n  public constructor(\n    message: string,\n    public code?: number,\n    public response?: Response,\n    public json?: any,\n  ) {\n    super(message);\n  }\n\n  public static fromCode(code: number) {\n    return new HttpError(HttpError.messages[code], code);\n  }\n}\n\nexport class TimeoutError extends CustomError {\n  public constructor(public url: string, public ms: number) {\n    super(`Call to ${url} timed out after ${ms}ms.`);\n  }\n}\n\nexport class RetryError extends CustomError {}\n","import * as _ from 'lodash';\n// import { authSvc } from '@console/internal/module/auth';\nimport { RetryError, HttpError } from '../error/http-error';\n// import { InternalReduxStore } from '../redux';\n\nconst InternalReduxStore = null;\n\nconst cookiePrefix = 'csrf-token=';\nexport const getCSRFToken = () =>\n  document &&\n  document.cookie &&\n  document.cookie\n    .split(';')\n    .map((c) => _.trim(c))\n    .filter((c) => c.startsWith(cookiePrefix))\n    .map((c) => c.slice(cookiePrefix.length))\n    .pop();\n\n// TODO: url can be url or path, but shouldLogout only handles paths\nexport const shouldLogout = (url: string): boolean => {\n  const k8sRegex = new RegExp(`^${window.SERVER_FLAGS.basePath}api/kubernetes/`);\n  // 401 from k8s. show logout screen\n  if (k8sRegex.test(url)) {\n    // Don't let 401s from proxied services log out users\n    const proxyRegex = new RegExp(`^${window.SERVER_FLAGS.basePath}api/kubernetes/api/v1/proxy/`);\n    if (proxyRegex.test(url)) {\n      return false;\n    }\n    const serviceRegex = new RegExp(\n      `^${window.SERVER_FLAGS.basePath}api/kubernetes/api/v1/namespaces/\\\\w+/services/\\\\w+/proxy/`,\n    );\n    if (serviceRegex.test(url)) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n};\n\nexport const validateStatus = async (\n  response: Response,\n  url: string,\n  method: string,\n  retry: boolean,\n) => {\n  if (response.ok) {\n    return response;\n  }\n\n  if (retry && response.status === 429) {\n    throw new RetryError();\n  }\n\n  if (response.status === 401 && shouldLogout(url)) {\n    // authSvc.logout(window.location.pathname);\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (!contentType || contentType.indexOf('json') === -1) {\n    throw new HttpError(response.statusText, response.status, response);\n  }\n\n  if (response.status === 403) {\n    return response.json().then((json) => {\n      throw new HttpError(\n        json.message || 'Access denied due to cluster policy.',\n        response.status,\n        response,\n        json,\n      );\n    });\n  }\n\n  return response.json().then((json) => {\n    // retry 409 conflict errors due to ClustResourceQuota / ResourceQuota\n    // https://bugzilla.redhat.com/show_bug.cgi?id=1920699\n    if (\n      retry &&\n      method === 'POST' &&\n      response.status === 409 &&\n      ['resourcequotas', 'clusterresourcequotas'].includes(json.details?.kind)\n    ) {\n      throw new RetryError();\n    }\n    const cause = json.details?.causes?.[0];\n    let reason;\n    if (cause) {\n      reason = `Error \"${cause.message}\" for field \"${cause.field}\".`;\n    }\n    if (!reason) {\n      reason = json.message;\n    }\n    if (!reason) {\n      reason = json.error;\n    }\n    if (!reason) {\n      reason = response.statusText;\n    }\n\n    throw new HttpError(reason, response.status, response, json);\n  });\n};\n\ntype ImpersonateHeaders = {\n  'Impersonate-User': string;\n};\nexport const getImpersonateHeaders = (): ImpersonateHeaders => {\n  if (!InternalReduxStore) return undefined;\n  const { kind, name } = InternalReduxStore.getState().UI.get('impersonate', {});\n  if ((kind === 'User' || kind === 'Group') && name) {\n    // Even if we are impersonating a group, we still need to set Impersonate-User to something or k8s will complain\n    const headers = {\n      'Impersonate-User': name,\n    };\n    if (kind === 'Group') {\n      headers['Impersonate-Group'] = name;\n    }\n    return headers;\n  }\n  return undefined;\n};\n","import * as _ from 'lodash';\nimport { ConsoleFetchText, ConsoleFetchJSON, ConsoleFetch } from '../../extensions/console-types';\nimport { TimeoutError, RetryError } from '../error/http-error';\nimport { getCSRFToken, validateStatus, getImpersonateHeaders } from './console-fetch-utils';\n\nconst initDefaults = {\n  headers: {},\n  credentials: 'same-origin',\n};\n\nconst consoleFetchInternal = (\n  url: string,\n  options: RequestInit,\n  timeout: number,\n  retry: boolean,\n): Promise<Response> => {\n  const allOptions = _.defaultsDeep({}, initDefaults, options);\n  if (allOptions.method !== 'GET') {\n    allOptions.headers['X-CSRFToken'] = getCSRFToken();\n  }\n\n  // If the URL being requested is absolute (and therefore, not a local request),\n  // remove the authorization header to prevent credentials from leaking.\n  if (url.indexOf('://') >= 0) {\n    delete allOptions.headers.Authorization;\n    delete allOptions.headers['X-CSRFToken'];\n  }\n\n  const fetchPromise = fetch(url, allOptions).then((response) =>\n    validateStatus(response, url, allOptions.method, retry),\n  );\n\n  // return fetch promise directly if timeout <= 0\n  if (timeout < 1) {\n    return fetchPromise;\n  }\n\n  const timeoutPromise: Promise<Response> = new Promise((unused, reject) =>\n    setTimeout(() => reject(new TimeoutError(url, timeout)), timeout),\n  );\n\n  // Initiate both the fetch promise and a timeout promise\n  return Promise.race([fetchPromise, timeoutPromise]);\n};\n\n/**\n * A custom wrapper around `fetch` that adds console specific headers and allows for retries and timeouts.\n * It also validates the response status code and throws appropriate error or logs out the user if required.\n * @param url The URL to fetch\n * @param method  The HTTP method to use\n * @param options The options to pass to fetch\n * @param timeout The timeout in milliseconds\n * @return A promise that resolves to the response\n * * */\nexport const consoleFetch: ConsoleFetch = async (url, options = {}, timeout = 60000) => {\n  let attempt = 0;\n  let response;\n  let retry = true;\n  while (retry) {\n    retry = false;\n    attempt++;\n    try {\n      // have to disable for retry logic\n      // eslint-disable-next-line no-await-in-loop\n      response = await consoleFetchInternal(url, options, timeout, attempt < 3);\n    } catch (e) {\n      if (e instanceof RetryError) {\n        retry = true;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return response;\n};\n\nconst consoleFetchCommon = async (\n  url: string,\n  method: string = 'GET',\n  options: RequestInit = {},\n  timeout?: number,\n) => {\n  const headers = getImpersonateHeaders() || {};\n  // Pass headers last to let callers to override Accept.\n  const allOptions = _.defaultsDeep({ method }, options, { headers });\n  const response = await consoleFetch(url, allOptions, timeout);\n  const text = await response.text();\n  const isPlainText = response.headers.get('Content-Type') === 'text/plain';\n  if (!text) {\n    return isPlainText ? '' : {};\n  }\n  return isPlainText || !response.ok ? text : JSON.parse(text);\n};\n\n/**\n * A custom wrapper around `fetch` that adds console specific headers and allows for retries and timeouts.\n * It also validates the response status code and throws appropriate error or logs out the user if required.\n * It returns the response as a JSON object.\n * Uses consoleFetch internally.\n * @param url The URL to fetch\n * @param method  The HTTP method to use. Defaults to GET\n * @param options The options to pass to fetch\n * @param timeout The timeout in milliseconds\n * @returns A promise that resolves to the response as JSON object.\n * * */\nexport const consoleFetchJSON: ConsoleFetchJSON = (url, method = 'GET', options = {}, timeout) => {\n  const allOptions = _.defaultsDeep({}, options, { headers: { Accept: 'application/json' } });\n  return consoleFetchCommon(url, method, allOptions, timeout);\n};\n\n/**\n * A custom wrapper around `fetch` that adds console specific headers and allows for retries and timeouts.\n * It also validates the response status code and throws appropriate error or logs out the user if required.\n * It returns the response as a text.\n * Uses consoleFetch internally.\n * @param url The URL to fetch\n * @param method  The HTTP method to use. Defaults to GET\n * @param options The options to pass to fetch\n * @param timeout The timeout in milliseconds\n * @returns A promise that resolves to the response as text.\n * * */\nexport const consoleFetchText: ConsoleFetchText = (url, options = {}, timeout) => {\n  return consoleFetchCommon(url, 'GET', options, timeout);\n};\n\nconst consoleFetchSendJSON = (\n  url: string,\n  method: string,\n  json = null,\n  options: RequestInit = {},\n  timeout: number,\n) => {\n  const allOptions: Record<string, any> = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': `application/${\n        method === 'PATCH' ? 'json-patch+json' : 'json'\n      };charset=UTF-8`,\n    },\n  };\n  if (json) {\n    allOptions.body = JSON.stringify(json);\n  }\n  return consoleFetchJSON(url, method, _.defaultsDeep(allOptions, options), timeout);\n};\n\n/**\n * A custom DELETE method of consoleFetchJSON.\n * It sends an optional JSON object as the body of the request and adds extra headers for patch request.\n * @param url The URL to delete the object\n * @param json The JSON to delete the object\n * @param options The options to pass to fetch\n * @param timeout The timeout in milliseconds\n * * */\nconsoleFetchJSON.delete = (url, json = null, options = {}, timeout) => {\n  return json\n    ? consoleFetchSendJSON(url, 'DELETE', json, options, timeout)\n    : consoleFetchJSON(url, 'DELETE', options, timeout);\n};\n\n/**\n * A custom POST method of consoleFetchJSON.\n * It sends the JSON object as the body of the request.\n * @param url The URL to post the object\n * @param json The JSON to POST the object\n * @param options The options to pass to fetch\n * @param timeout The timeout in milliseconds\n * * */\nconsoleFetchJSON.post = (url: string, json, options = {}, timeout) =>\n  consoleFetchSendJSON(url, 'POST', json, options, timeout);\n\n/**\n * A custom PUT method of consoleFetchJSON.\n * It sends the JSON object as the body of the request.\n * @param url The URL to put the object\n * @param json The JSON to PUT the object\n * @param options The options to pass to fetch\n * @param timeout The timeout in milliseconds\n * * */\nconsoleFetchJSON.put = (url: string, json, options = {}, timeout) =>\n  consoleFetchSendJSON(url, 'PUT', json, options, timeout);\n\n/**\n * A custom PATCH method of consoleFetchJSON.\n * It sends the JSON object as the body of the request.\n * @param url The URL to patch the object\n * @param json The JSON to PATCH the object\n * @param options The options to pass to fetch\n * @param timeout The timeout in milliseconds\n * * */\nconsoleFetchJSON.patch = (url: string, json, options = {}, timeout) =>\n  consoleFetchSendJSON(url, 'PATCH', json, options, timeout);\n","import * as _ from 'lodash';\n\nconst isPlainNonReactObject = (obj: any) => _.isPlainObject(obj) && !obj.$$typeof;\n\n/**\n * Recursive equivalent of `_.forOwn` function that traverses plain objects and arrays.\n */\nexport const deepForOwn = <T = any>(\n  obj: {},\n  predicate: (value: any) => value is T,\n  valueCallback: (value: T, key: string, container: {}) => void,\n) => {\n  const visitValue = (value: any, key: string, container: {}) => {\n    if (predicate(value)) {\n      valueCallback(value, key, container);\n    } else if (isPlainNonReactObject(value)) {\n      deepForOwn(value, predicate, valueCallback);\n    }\n  };\n\n  _.forOwn<any>(obj, (value, key, container) => {\n    if (Array.isArray(value)) {\n      value.forEach((arrayElement, index) => {\n        visitValue(arrayElement, index.toString(), value);\n      });\n    } else {\n      visitValue(value, key, container);\n    }\n  });\n};\n","/**\n * Unwrap the result of `Promise.allSettled` call as `[fulfilledValues, rejectedReasons, results]` tuple.\n */\nconst unwrapPromiseSettledResults = <T = any>(\n  results: PromiseSettledResult<T>[],\n): [T[], any[], PromiseSettledResult<T>[]] => {\n  const fulfilledValues = results\n    .filter((r) => r.status === 'fulfilled')\n    .map((r: PromiseFulfilledResult<T>) => r.value);\n\n  const rejectedReasons = results\n    .filter((r) => r.status === 'rejected')\n    .map((r: PromiseRejectedResult) => r.reason);\n\n  return [fulfilledValues, rejectedReasons, results];\n};\n\n/**\n * Await `Promise.allSettled(promises)` and unwrap the resulting objects.\n *\n * `Promise.allSettled` never rejects, therefore the resulting `Promise` never rejects.\n */\nexport const settleAllPromises = async <T = any>(promises: Promise<T>[]) => {\n  const results = await Promise.allSettled(promises);\n  return unwrapPromiseSettledResults(results);\n};\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-require-imports */\n\nimport { RemoteEntryModule } from './types';\n\n/**\n * At runtime, Console will override (i.e. enforce Console-bundled implementation of) shared\n * modules for each dynamic plugin, before loading any of the modules exposed by that plugin.\n *\n * This way, a single version of React etc. is used by Console application and its plugins.\n */\nexport const overrideSharedModules = (entryModule: RemoteEntryModule) => {\n  entryModule.override({\n    '@openshift-console/dynamic-plugin-sdk': async () => () =>\n      require('@console/dynamic-plugin-sdk/src/lib-core'),\n    '@openshift-console/dynamic-plugin-sdk-internal': async () => () =>\n      require('@console/dynamic-plugin-sdk/src/lib-internal'),\n    react: async () => () => require('react'),\n    // 'react-helmet': async () => () => require('react-helmet'),\n    // 'react-i18next': async () => () => require('react-i18next'),\n    'react-router': async () => () => require('react-router'),\n    'react-router-dom': async () => () => require('react-router-dom'),\n  });\n};\n","/* eslint-disable no-console */\n\nimport * as _ from 'lodash';\n// import { PluginStore } from '@console/plugin-sdk/src/store';\nimport { resolveEncodedCodeRefs } from '../coderefs/coderef-resolver';\nimport { remoteEntryFile } from '../constants';\nimport { ConsolePluginManifestJSON } from '../schema/plugin-manifest';\nimport { overrideSharedModules } from '../shared-modules-override';\nimport { RemoteEntryModule } from '../types';\nimport { resolveURL } from '../utils/url';\nimport { fetchPluginManifest } from './plugin-manifest';\n\ntype ConsolePluginData = {\n  /** The manifest containing plugin metadata and extension declarations. */\n  manifest: ConsolePluginManifestJSON;\n  /** Indicates if `window.loadPluginEntry` callback has been fired for this plugin. */\n  entryCallbackFired: boolean;\n};\n\nconst pluginMap = new Map<string, ConsolePluginData>();\n\nexport const scriptIDPrefix = 'console-plugin';\n\nexport const getPluginID = (m: ConsolePluginManifestJSON) => `${m.name}@${m.version}`;\n\nexport const getScriptElementID = (m: ConsolePluginManifestJSON) => `${scriptIDPrefix}-${m.name}`;\n\nexport const loadDynamicPlugin = (baseURL: string, manifest: ConsolePluginManifestJSON) =>\n  new Promise<string>((resolve, reject) => {\n    const pluginID = getPluginID(manifest);\n\n    const existingPluginData = Array.from(pluginMap.values()).find(\n      (p) => p.manifest.name === manifest.name,\n    );\n\n    if (existingPluginData) {\n      const existingPluginID = getPluginID(existingPluginData.manifest);\n      reject(new Error(`Attempt to reload plugin ${existingPluginID} with ${pluginID}`));\n      return;\n    }\n\n    pluginMap.set(pluginID, { manifest, entryCallbackFired: false });\n\n    const script = document.createElement('script');\n    script.id = getScriptElementID(manifest);\n    script.src = resolveURL(baseURL, remoteEntryFile);\n    script.async = true;\n\n    script.onload = () => {\n      if (pluginMap.get(pluginID).entryCallbackFired) {\n        resolve(pluginID);\n      } else {\n        reject(new Error(`Entry script for plugin ${pluginID} loaded without callback`));\n      }\n    };\n\n    script.onerror = (event) => {\n      console.error(event);\n      reject(new Error(`Error while loading entry script for plugin ${pluginID}`));\n    };\n\n    console.info(`Loading entry script for plugin ${pluginID} from ${script.src}`);\n    document.head.appendChild(script);\n  });\n\nexport const getPluginEntryCallback = (\n  pluginStore: any, //PluginStore,\n  overrideSharedModulesCallback: typeof overrideSharedModules,\n  resolveEncodedCodeRefsCallback: typeof resolveEncodedCodeRefs,\n) => (pluginID: string, entryModule: RemoteEntryModule) => {\n  if (!pluginMap.has(pluginID)) {\n    console.error(`Received callback for unknown plugin ${pluginID}`);\n    return;\n  }\n\n  const pluginData = pluginMap.get(pluginID);\n\n  if (pluginData.entryCallbackFired) {\n    console.error(`Received callback for already loaded plugin ${pluginID}`);\n    return;\n  }\n\n  pluginData.entryCallbackFired = true;\n\n  try {\n    overrideSharedModulesCallback(entryModule);\n  } catch (error) {\n    console.error(`Failed to override shared modules for plugin ${pluginID}`, error);\n    return;\n  }\n\n  const resolvedExtensions = resolveEncodedCodeRefsCallback(\n    pluginData.manifest.extensions,\n    entryModule,\n    pluginID,\n    () => {\n      console.error(`Code reference resolution failed for plugin ${pluginID}`);\n      pluginStore.setDynamicPluginEnabled(pluginID, false);\n    },\n  );\n\n  pluginStore.addDynamicPlugin(pluginID, pluginData.manifest, resolvedExtensions);\n};\n\nexport const registerPluginEntryCallback = (pluginStore: any/*PluginStore*/) => {\n  window.loadPluginEntry = getPluginEntryCallback(\n    pluginStore,\n    overrideSharedModules,\n    resolveEncodedCodeRefs,\n  );\n};\n\nexport const loadPluginFromURL = async (baseURL: string) => {\n  const manifest = await fetchPluginManifest(baseURL);\n  return loadDynamicPlugin(baseURL, manifest);\n};\n\nexport const loadAndEnablePlugin = async (\n  pluginName: string,\n  pluginStore: any, //PluginStore,\n  onError: VoidFunction = _.noop,\n) => {\n  const url = `${window.SERVER_FLAGS.basePath}api/plugins/${pluginName}/`;\n\n  try {\n    const pluginID = await loadPluginFromURL(url);\n    pluginStore.setDynamicPluginEnabled(pluginID, true);\n  } catch (e) {\n    console.error(`Error while loading plugin from ${url}`, e);\n    onError();\n  }\n};\n\nexport const getStateForTestPurposes = () => ({\n  pluginMap,\n});\n\nexport const resetStateAndEnvForTestPurposes = () => {\n  pluginMap.clear();\n\n  document.querySelectorAll(`[id^=\"${scriptIDPrefix}\"]`).forEach((element) => {\n    element.remove();\n  });\n\n  window.loadPluginEntry = undefined;\n};\n","import * as _ from 'lodash';\nimport { Store } from 'redux';\nimport { initSubscriptionService } from '@console/plugin-sdk/src/api/pluginSubscriptionService';\nimport { PluginStore } from '@console/plugin-sdk/src/store';\nimport { registerPluginEntryCallback, /*loadAndEnablePlugin*/ } from './plugin-loader';\n\nexport const initConsolePlugins = _.once((pluginStore: PluginStore, reduxStore: Store<any>) => {\n  initSubscriptionService(pluginStore, reduxStore);\n  registerPluginEntryCallback(pluginStore);\n\n  // pluginStore.getAllowedDynamicPluginNames().forEach((pluginName) => {\n  //   loadAndEnablePlugin(pluginName, pluginStore, () => {\n  //     // TODO(vojtech): add new entry into the notification drawer\n  //     pluginStore.registerFailedDynamicPlugin(pluginName);\n  //   });\n  // });\n});\n","/**\n * This is the entirety of the `redux-thunk` library.\n * It hasn't changed since 2016 and has problems with it's TypeScript definitions\n * (https://github.com/reduxjs/redux-thunk/issues/231), so just including it here.\n */\nfunction createThunkMiddleware(extraArgument?) {\n  return ({ dispatch, getState }) => (next) => (action) => {\n    if (typeof action === 'function') {\n      return action(dispatch, getState, extraArgument);\n    }\n\n    return next(action);\n  };\n}\n\nconst thunk = createThunkMiddleware();\n(thunk as any).withExtraArgument = createThunkMiddleware;\n\nexport default thunk;\n","import flags from './flags';\n\nexport const baseReducers = Object.freeze({\n  FLAGS: flags,\n});\n","export type FLAGS = { [key: string]: boolean };\n\n/**\n * TODO: Use the regular flags reducer\n */\nconst flags = (state: FLAGS, action): FLAGS => {\n  if (!state) {\n    return {};\n  }\n\n  switch (action.type) {\n    case 'setFlag':\n      return state[action.payload.flag] = action.payload.value;\n    default:\n      return state;\n  }\n};\n\nexport default flags;\n","import { applyMiddleware, combineReducers, compose, createStore, Store } from 'redux';\nimport thunk from './middleware/thunk';\nimport { baseReducers } from './reducers';\nimport { RootState } from './types';\n\nconst composeEnhancers =\n  (process.env.NODE_ENV !== 'production' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nlet cachedStore: Store<RootState> = null;\nconst useReduxStore = (): Store<RootState> => {\n  if (!cachedStore) {\n    const store = createStore(\n      combineReducers<RootState>(baseReducers),\n      {},\n      composeEnhancers(applyMiddleware(thunk)),\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Expose Redux store for debugging\n      window.store = store;\n    }\n\n    cachedStore = store;\n  }\n\n  return cachedStore;\n};\n\nexport default useReduxStore;\n","import * as React from 'react';\nimport { initConsolePlugins } from '@console/dynamic-plugin-sdk/src/runtime/plugin-init';\nimport { /* ActivePlugin, */ PluginStore } from '@console/plugin-sdk';\nimport { useReduxStore } from '../../redux';\nimport { getEnabledDynamicPluginNames } from './utils';\n\nconst IncludePlugins: React.FC = () => {\n  const store = useReduxStore();\n\n  React.useEffect(() => {\n    if (store) {\n      const activePlugins = [];\n        // process.env.NODE_ENV !== 'test'\n        //   ? /* eslint-disable global-require, @typescript-eslint/no-require-imports */\n        //     // eslint-disable-next-line import/no-unresolved\n        //     (require('@console/active-plugins').default as ActivePlugin[])\n        //   : [];\n      const dynamicPluginNames = getEnabledDynamicPluginNames();\n      const pluginStore = new PluginStore(activePlugins, dynamicPluginNames);\n\n      initConsolePlugins(pluginStore, store);\n    }\n  }, [store]);\n\n  return null;\n};\n\nexport default IncludePlugins;\n","import * as _ from 'lodash';\n\n/** TODO: Copied right now -- duplicate definition */\nconst getURLSearchParams = () => {\n  const all: any = {};\n  const params = new URLSearchParams(window.location.search);\n\n  for (const [k, v] of params.entries()) {\n    all[k] = v;\n  }\n\n  return all;\n};\n\nexport const getEnabledDynamicPluginNames = () => {\n  const allPluginNames = window.SERVER_FLAGS.consolePlugins;\n  const disabledPlugins = getURLSearchParams()['disable-plugins'];\n\n  if (!disabledPlugins) {\n    return allPluginNames;\n  }\n\n  if (disabledPlugins === '') {\n    return [];\n  }\n\n  const disabledPluginNames = _.compact(disabledPlugins.split(','));\n  return allPluginNames.filter((pluginName) => !disabledPluginNames.includes(pluginName));\n};\n","import * as _ from 'lodash';\nimport { Store } from 'redux';\nimport { isExtensionInUse, PluginStore, DynamicPluginInfo } from '../store';\nimport { Extension, ExtensionTypeGuard, LoadedExtension } from '../typings';\n\nlet subscriptionServiceInitialized = false;\n\nconst extensionSubscriptions: ExtensionSubscription[] = [];\nconst dynamicPluginListeners: DynamicPluginListener[] = [];\n\nlet onExtensionSubscriptionAdded: (sub: ExtensionSubscription) => void = _.noop;\nlet onDynamicPluginListenerAdded: (listener: DynamicPluginListener) => void = _.noop;\n\nconst subscribe = <T>(sub: T, subList: T[], invokeListener: VoidFunction): VoidFunction => {\n  let isSubscribed = true;\n\n  subList.push(sub);\n  invokeListener();\n\n  return () => {\n    if (isSubscribed) {\n      isSubscribed = false;\n      subList.splice(subList.indexOf(sub), 1);\n    }\n  };\n};\n\nexport const initSubscriptionService = (pluginStore: PluginStore, reduxStore: Store<any>) => {\n  if (subscriptionServiceInitialized) {\n    throw new Error('Subscription service is already initialized');\n  }\n\n  subscriptionServiceInitialized = true;\n\n  const getAllExtensions = () => pluginStore.getAllExtensions();\n  const getAllFlags = () => reduxStore.getState().FLAGS;\n\n  type FeatureFlags = ReturnType<typeof getAllFlags>;\n\n  const invokeExtensionListener = (\n    sub: ExtensionSubscription,\n    currentExtensions: Extension[],\n    currentFlags: FeatureFlags,\n  ) => {\n    // Narrow extensions according to type guards\n    const matchedExtensions = _.flatMap(sub.typeGuards.map((tg) => currentExtensions.filter(tg)));\n\n    // Gate matched extensions by relevant feature flags\n    const extensionsInUse = matchedExtensions.filter((e) =>\n      isExtensionInUse(e, currentFlags),\n    );\n\n    // Invoke listener only if the extension list has changed\n    if (!_.isEqual(extensionsInUse, sub.listenerLastArgs)) {\n      sub.listenerLastArgs = extensionsInUse;\n      sub.listener(extensionsInUse);\n    }\n  };\n\n  onExtensionSubscriptionAdded = (sub) => {\n    invokeExtensionListener(sub, getAllExtensions(), getAllFlags());\n  };\n\n  onDynamicPluginListenerAdded = (listener) => {\n    listener(pluginStore.getDynamicPluginInfo());\n  };\n\n  let lastExtensions: Extension[] = null;\n  let lastFlags: FeatureFlags = null;\n\n  const invokeAllExtensionListeners = () => {\n    if (extensionSubscriptions.length === 0) {\n      return;\n    }\n\n    const nextExtensions = getAllExtensions();\n    const nextFlags = getAllFlags();\n\n    if (_.isEqual(nextExtensions, lastExtensions) && nextFlags === lastFlags) {\n      return;\n    }\n\n    lastExtensions = nextExtensions;\n    lastFlags = nextFlags;\n\n    extensionSubscriptions.forEach((sub) => {\n      invokeExtensionListener(sub, nextExtensions, nextFlags);\n    });\n  };\n\n  let lastPluginEntries: DynamicPluginInfo[] = null;\n\n  const invokeAllDynamicPluginListeners = () => {\n    if (dynamicPluginListeners.length === 0) {\n      return;\n    }\n\n    const nextPluginEntries = pluginStore.getDynamicPluginInfo();\n\n    if (_.isEqual(nextPluginEntries, lastPluginEntries)) {\n      return;\n    }\n\n    lastPluginEntries = nextPluginEntries;\n\n    dynamicPluginListeners.forEach((listener) => {\n      listener(nextPluginEntries);\n    });\n  };\n\n  // Subscribe to changes in Console plugins and Redux\n  pluginStore.subscribe(invokeAllExtensionListeners);\n  pluginStore.subscribe(invokeAllDynamicPluginListeners);\n  reduxStore.subscribe(invokeAllExtensionListeners);\n\n  // Invoke listeners registered prior to initializing subscription service\n  invokeAllExtensionListeners();\n  invokeAllDynamicPluginListeners();\n};\n\n/**\n * Subscription based mechanism for consuming Console extensions.\n *\n * Provided listener will be invoked immediately to allow processing existing extensions.\n * It will also be invoked whenever the computed list of extension instances changes.\n *\n * _Tip: need to access extensions in a React component?_\n * - **Yes**\n *   - Functional components: use `useExtensions` hook.\n *   - Class components: use `withExtensions` higher-order component.\n * - **No**\n *   - Use `subscribeToExtensions` function.\n *\n * @param listener Listener invoked when the list of extension instances which are\n * currently in use, narrowed by the given type guard(s), changes.\n *\n * @param typeGuards Type guard(s) used to narrow the extension instances.\n *\n * @returns Function that unsubscribes the listener.\n */\nexport const subscribeToExtensions = <E extends Extension>(\n  listener: ExtensionListener<LoadedExtension<E>>,\n  ...typeGuards: ExtensionTypeGuard<E>[]\n) => {\n  if (typeGuards.length === 0) {\n    throw new Error('You must pass at least one type guard to subscribeToExtensions');\n  }\n\n  const sub: ExtensionSubscription<E> = { listener, typeGuards };\n\n  return subscribe<ExtensionSubscription>(sub, extensionSubscriptions, () => {\n    onExtensionSubscriptionAdded(sub);\n  });\n};\n\n/**\n * Subscribe to changes related to processing Console dynamic plugins.\n *\n * @param listener Listener invoked when the runtime status of a dynamic plugin changes.\n *\n * @returns Function that unsubscribes the listener.\n */\nexport const subscribeToDynamicPlugins = (listener: DynamicPluginListener) => {\n  return subscribe<DynamicPluginListener>(listener, dynamicPluginListeners, () => {\n    onDynamicPluginListenerAdded(listener);\n  });\n};\n\n/**\n * `ExtensionListener` adapter that computes the difference between the calls.\n */\nexport const extensionDiffListener = <E extends Extension>(\n  listener: (added: E[], removed: E[]) => void,\n): ExtensionListener<E> => {\n  let prevExtensions: E[] = [];\n\n  return (nextExtensions: E[]) => {\n    listener(\n      _.difference(nextExtensions, prevExtensions),\n      _.difference(prevExtensions, nextExtensions),\n    );\n\n    prevExtensions = nextExtensions;\n  };\n};\n\ntype ExtensionListener<E extends Extension> = (extensions: E[]) => void;\n\ntype ExtensionSubscription<E extends Extension = Extension> = {\n  listener: ExtensionListener<E>;\n  typeGuards: ExtensionTypeGuard<E>[];\n  listenerLastArgs?: E[];\n};\n\ntype DynamicPluginListener = (pluginInfoEntries: DynamicPluginInfo[]) => void;\n","// import { TFunction } from 'i18next';\nimport { deepForOwn } from '@console/dynamic-plugin-sdk/src/utils/object';\nimport { Extension } from '../typings';\n\nexport const isTranslatableString = (value): value is string => {\n  return (\n    typeof value === 'string' && value.length > 2 && value.startsWith('%') && value.endsWith('%')\n  );\n};\n\nexport const getTranslationKey = (value: string) =>\n  isTranslatableString(value) ? value.substr(1, value.length - 2) : undefined;\n\n/**\n * Recursively updates the extension's properties, replacing all translatable string values\n * via the provided `t` function.\n */\nexport const translateExtension = <E extends Extension>(extension: E, t: any): E => {\n  deepForOwn(extension.properties, isTranslatableString, (value, key, obj) => {\n    obj[key] = t(value);\n  });\n\n  return extension;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\n// import { useForceRender } from '@console/shared/src/hooks/useForceRender';\nimport { Extension, ExtensionTypeGuard, LoadedExtension } from '../typings';\nimport { translateExtension } from '../utils/extension-i18n';\n// import useTranslationExt from '../utils/useTranslationExt';\nimport { subscribeToExtensions } from './pluginSubscriptionService';\n\n/**\n * React hook for consuming Console extensions.\n *\n * This hook takes extension type guard(s) as its argument(s) and returns a list\n * of extension instances, narrowed by the given type guard(s), which are currently\n * in use.\n *\n * An extension is considered to be in use when\n *\n * - it is an always-on extension, i.e. not gated by any feature flags\n * - all feature flags referenced by its `flags` object are resolved to the right\n *   values\n *\n * When the list of matching extensions changes, the React component is re-rendered\n * with the hook returning an up-to-date list of extensions.\n *\n * Example usage:\n *\n * ```ts\n * const Example = () => {\n *   const navItemExtensions = useExtensions<NavItem>(isNavItem);\n *   // process extensions and render your component\n * };\n * ```\n *\n * The hook's result is guaranteed to be referentially stable across re-renders.\n *\n * @param typeGuards Type guard(s) used to narrow the extension instances.\n *\n * @returns List of extension instances which are currently in use, narrowed by the\n * given type guard(s).\n */\nexport const useExtensions = <E extends Extension>(\n  ...typeGuards: ExtensionTypeGuard<E>[]\n): LoadedExtension<E>[] => {\n  if (typeGuards.length === 0) {\n    throw new Error('You must pass at least one type guard to useExtensions');\n  }\n\n  const forceRender = () => {}; // useForceRender();\n\n  const isMountedRef = React.useRef(true);\n  const unsubscribeRef = React.useRef<VoidFunction>(null);\n  const extensionsInUseRef = React.useRef<LoadedExtension<E>[]>([]);\n  const latestTypeGuardsRef = React.useRef<ExtensionTypeGuard<E>[]>(typeGuards);\n  // const { t } = useTranslationExt();\n  const t = (v) => v;\n\n  const trySubscribe = React.useCallback(() => {\n    if (unsubscribeRef.current === null) {\n      unsubscribeRef.current = subscribeToExtensions<E>((extensions) => {\n        extensionsInUseRef.current = extensions.map((e) => translateExtension(e, t));\n        isMountedRef.current && forceRender();\n      }, ...latestTypeGuardsRef.current);\n    }\n  }, [forceRender, t]);\n\n  const tryUnsubscribe = React.useCallback(() => {\n    if (unsubscribeRef.current !== null) {\n      unsubscribeRef.current();\n      unsubscribeRef.current = null;\n    }\n  }, []);\n\n  if (!_.isEqual(latestTypeGuardsRef.current, typeGuards)) {\n    latestTypeGuardsRef.current = typeGuards;\n    tryUnsubscribe();\n  }\n\n  trySubscribe();\n\n  React.useEffect(\n    () => () => {\n      isMountedRef.current = false;\n      tryUnsubscribe();\n    },\n    [tryUnsubscribe],\n  );\n\n  return extensionsInUseRef.current;\n};\n","/* eslint-disable no-console */\n\nimport * as _ from 'lodash';\nimport { ConsolePluginManifestJSON } from '@console/dynamic-plugin-sdk/src/schema/plugin-manifest';\nimport { Extension, LoadedExtension, ActivePlugin } from './typings';\n\nexport const sanitizeExtension = <E extends Extension>(e: E): E => {\n  e.flags = e.flags || {};\n  e.flags.required = _.uniq(e.flags.required || []);\n  e.flags.disallowed = _.uniq(e.flags.disallowed || []);\n  return e;\n};\n\nexport const augmentExtension = <E extends Extension>(\n  e: E,\n  pluginID: string,\n  pluginName: string,\n  index: number,\n): LoadedExtension<E> =>\n  Object.assign(e, {\n    pluginID,\n    pluginName,\n    uid: `${pluginID}[${index}]`,\n  });\n\nexport const isExtensionInUse = (e: Extension, flags: FlagsObject): boolean =>\n  e.flags.required.every((f) => flags[f] === true) &&\n  e.flags.disallowed.every((f) => flags[f] === false);\n\nexport const getGatingFlagNames = (extensions: Extension[]): string[] =>\n  _.uniq([\n    ..._.flatMap(extensions.map((e) => e.flags.required)),\n    ..._.flatMap(extensions.map((e) => e.flags.disallowed)),\n  ]);\n\n/**\n * Provides access to Console plugins and their extensions.\n *\n * Only plugins listed via `allowedDynamicPluginNames` can be added dynamically at runtime.\n *\n * Subscribed `listeners` are invoked upon any of the following events:\n *\n * - when the list of extensions which are currently in use changes\n * - when the runtime status of a dynamic plugin changes\n *\n * In development, this object is exposed as `window.pluginStore` for easier debugging.\n */\nexport class PluginStore {\n  // Extensions contributed by static plugins (part of Console application itself)\n  private readonly staticPluginExtensions: LoadedExtension[];\n\n  // Extensions contributed by dynamic plugins (loaded from remote hosts at runtime)\n  private dynamicPluginExtensions: LoadedExtension[] = [];\n\n  private readonly allowedDynamicPluginNames: Set<string>;\n\n  // Dynamic plugins that were loaded successfully\n  private readonly loadedDynamicPlugins = new Map<string, LoadedDynamicPlugin>();\n\n  // Dynamic plugins that failed to load properly\n  private readonly failedDynamicPluginNames = new Set<string>();\n\n  private readonly listeners: VoidFunction[] = [];\n\n  constructor(staticPlugins: ActivePlugin[] = [], allowedDynamicPluginNames: string[] = []) {\n    this.staticPluginExtensions = _.flatMap(\n      staticPlugins.map((p) =>\n        p.extensions.map((e, index) =>\n          Object.freeze(augmentExtension(sanitizeExtension({ ...e }), p.name, p.name, index)),\n        ),\n      ),\n    );\n\n    this.allowedDynamicPluginNames = new Set(allowedDynamicPluginNames);\n  }\n\n  getAllExtensions() {\n    return [...this.staticPluginExtensions, ...this.dynamicPluginExtensions];\n  }\n\n  getAllowedDynamicPluginNames() {\n    return Array.from(this.allowedDynamicPluginNames);\n  }\n\n  subscribe(listener: VoidFunction): VoidFunction {\n    let isSubscribed = true;\n    this.listeners.push(listener);\n\n    return () => {\n      if (isSubscribed) {\n        isSubscribed = false;\n        this.listeners.splice(this.listeners.indexOf(listener), 1);\n      }\n    };\n  }\n\n  private invokeListeners() {\n    this.listeners.forEach((listener) => {\n      listener();\n    });\n  }\n\n  addDynamicPlugin(\n    pluginID: string,\n    manifest: ConsolePluginManifestJSON,\n    resolvedExtensions: Extension[],\n  ) {\n    if (this.loadedDynamicPlugins.has(pluginID)) {\n      console.warn(`Attempt to re-add plugin ${pluginID}`);\n      return;\n    }\n\n    if (!this.allowedDynamicPluginNames.has(manifest.name)) {\n      console.warn(`Attempt to add unexpected plugin ${pluginID}`);\n      return;\n    }\n\n    if (this.failedDynamicPluginNames.has(manifest.name)) {\n      console.warn(`Attempt to add plugin ${pluginID} previously marked as failed`);\n      return;\n    }\n\n    this.loadedDynamicPlugins.set(pluginID, {\n      manifest: Object.freeze(manifest),\n      processedExtensions: resolvedExtensions.map((e, index) =>\n        Object.freeze(augmentExtension(sanitizeExtension(e), pluginID, manifest.name, index)),\n      ),\n      enabled: false,\n    });\n\n    this.invokeListeners();\n\n    console.log(`Added plugin ${pluginID}`);\n  }\n\n  private updateExtensions() {\n    this.dynamicPluginExtensions = Array.from(this.loadedDynamicPlugins.values()).reduce(\n      (acc, plugin) => (plugin.enabled ? [...acc, ...plugin.processedExtensions] : acc),\n      [],\n    );\n  }\n\n  setDynamicPluginEnabled(pluginID: string, enabled: boolean) {\n    if (!this.loadedDynamicPlugins.has(pluginID)) {\n      console.warn(`Attempt to ${enabled ? 'enable' : 'disable'} unknown plugin ${pluginID}`);\n      return;\n    }\n\n    const plugin = this.loadedDynamicPlugins.get(pluginID);\n\n    if (plugin.enabled !== enabled) {\n      plugin.enabled = enabled;\n\n      this.updateExtensions();\n      this.invokeListeners();\n\n      console.log(`Plugin ${pluginID} is now ${enabled ? 'enabled' : 'disabled'}`);\n    }\n  }\n\n  private isDynamicPluginLoaded(pluginName: string) {\n    return Array.from(this.loadedDynamicPlugins.values()).some(\n      (plugin) => plugin.manifest.name === pluginName,\n    );\n  }\n\n  registerFailedDynamicPlugin(pluginName: string) {\n    if (!this.allowedDynamicPluginNames.has(pluginName)) {\n      console.warn(`Attempt to register unexpected plugin ${pluginName} as failed`);\n      return;\n    }\n\n    if (this.isDynamicPluginLoaded(pluginName)) {\n      console.warn(`Attempt to register an already loaded plugin ${pluginName} as failed`);\n      return;\n    }\n\n    this.failedDynamicPluginNames.add(pluginName);\n    this.invokeListeners();\n  }\n\n  getDynamicPluginInfo(): DynamicPluginInfo[] {\n    const loadedPluginEntries = Array.from(this.loadedDynamicPlugins.keys()).reduce(\n      (acc, pluginID) => {\n        const plugin = this.loadedDynamicPlugins.get(pluginID);\n        acc.push({\n          status: 'Loaded',\n          pluginID,\n          metadata: _.omit(plugin.manifest, 'extensions'),\n          enabled: plugin.enabled,\n        });\n        return acc;\n      },\n      [] as LoadedDynamicPluginInfo[],\n    );\n\n    const failedPluginEntries = Array.from(this.failedDynamicPluginNames.values()).reduce(\n      (acc, pluginName) => {\n        acc.push({\n          status: 'Failed',\n          pluginName,\n        });\n        return acc;\n      },\n      [] as NotLoadedDynamicPluginInfo[],\n    );\n\n    const pendingPluginEntries = Array.from(this.allowedDynamicPluginNames.values())\n      .filter(\n        (pluginName) =>\n          !this.isDynamicPluginLoaded(pluginName) && !this.failedDynamicPluginNames.has(pluginName),\n      )\n      .reduce((acc, pluginName) => {\n        acc.push({\n          status: 'Pending',\n          pluginName,\n        });\n        return acc;\n      }, [] as NotLoadedDynamicPluginInfo[]);\n\n    return [...loadedPluginEntries, ...failedPluginEntries, ...pendingPluginEntries];\n  }\n\n  getStateForTestPurposes() {\n    return {\n      staticPluginExtensions: this.staticPluginExtensions,\n      dynamicPluginExtensions: this.dynamicPluginExtensions,\n      loadedDynamicPlugins: this.loadedDynamicPlugins,\n      failedDynamicPluginNames: this.failedDynamicPluginNames,\n      listeners: this.listeners,\n    };\n  }\n}\n\ntype FlagsObject = { [key: string]: boolean };\n\ntype DynamicPluginManifest = Readonly<ConsolePluginManifestJSON>;\n\ntype DynamicPluginMetadata = Omit<DynamicPluginManifest, 'extensions'>;\n\ntype LoadedDynamicPlugin = {\n  manifest: DynamicPluginManifest;\n  processedExtensions: Readonly<LoadedExtension[]>;\n  enabled: boolean;\n};\n\nexport type LoadedDynamicPluginInfo = {\n  status: 'Loaded';\n  pluginID: string;\n  metadata: DynamicPluginMetadata;\n  enabled: boolean;\n};\n\nexport type NotLoadedDynamicPluginInfo = {\n  status: 'Pending' | 'Failed';\n  pluginName: string;\n};\n\nexport type DynamicPluginInfo = LoadedDynamicPluginInfo | NotLoadedDynamicPluginInfo;\n\nexport const isLoadedDynamicPluginInfo = (i: DynamicPluginInfo): i is LoadedDynamicPluginInfo =>\n  i.status === 'Loaded';\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n"],"names":["module","exports","EmptyState","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","Routes","fallback","Bullseye","Spinner","Switch","Route","path","component","Redirect","to","history","useHistory","register","notifications","window","insights","chrome","init","identifyApp","unregister","on","event","push","navId","useResolvedExtensions","typeGuards","extensions","resolvedExtensions","setResolvedExtensions","resolved","setResolved","errors","setErrors","disposed","map","e","then","fulfilledValues","rejectedReasons","length","console","error","codeRefSymbol","Symbol","isEncodedCodeRef","obj","Object","getOwnPropertyNames","$codeRef","isExecutableCodeRef","getOwnPropertySymbols","resolveEncodedCodeRefs","entryModule","pluginID","errorCallback","properties","ref","key","loader","applyCodeRefSymbol","moduleName","exportName","value","match","parseEncodedCodeRefValue","requestedModule","get","loadReferencedObject","defineProperty","resolveExtension","extension","valueResolutions","resolvedValue","isAddAction","type","isAddActionGroup","isCatalogItemType","isCatalogItemProvider","isCatalogItemFilter","isClusterGlobalConfig","isContextProvider","isDashboardsTab","isDashboardsCard","isDashboardsOverviewHealthPrometheusSubsystem","isResolvedDashboardsOverviewHealthPrometheusSubsystem","isDashboardsOverviewHealthURLSubsystem","isResolvedDashboardsOverviewHealthURLSubsystem","isDashboardsOverviewHealthResourceSubsystem","isResolvedDashboardsOverviewHealthResourceSubsystem","isDashboardsOverviewHealthOperator","isResolvedDashboardsOverviewHealthOperator","isDashboardsInventoryItemGroup","isDashboardsOverviewInventoryItem","isDashboardsOverviewInventoryItemReplacement","isProjectDashboardInventoryItem","isDashboardsOverviewResourceActivity","isDashboardsOverviewPrometheusActivity","isDashboardsOverviewHealthSubsystem","isFeatureFlag","isModelFeatureFlag","isFileUpload","isHrefNavItem","isResourceNSNavItem","isResourceClusterNavItem","isSeparator","isNavSection","isNavItem","isRoutePage","isStandaloneRoutePage","isResourceListPage","isResourceDetailsPage","isResourceTabPage","isPerspective","isPVCCreateProp","isPVCAlert","isPVCStatus","isPVCDelete","isReduxReducer","isModelMetadata","isTelemetryListener","isYAMLTemplate","isAlertAction","InventoryStatusGroup","HealthState","isStorageProvider","isActionProvider","isResourceActionProvider","isActionGroup","isActionFilter","isCreateResource","UserPreferenceFieldType","isUserPreferenceItem","isUserPreferenceGroup","consoleFetch","consoleFetchJSON","consoleFetchText","useActivePerspective","withActivePerspective","PerspectiveContext","activePerspective","setActivePerspective","useContext","Component","props","CustomError","Error","constructor","message","super","this","name","enumerable","configurable","captureStackTrace","stack","setPrototypeOf","prototype","HttpError","code","response","json","static","messages","TimeoutError","url","ms","RetryError","cookiePrefix","validateStatus","method","retry","ok","status","RegExp","SERVER_FLAGS","basePath","test","shouldLogout","contentType","headers","indexOf","statusText","includes","details","kind","cause","causes","reason","field","initDefaults","credentials","consoleFetchInternal","options","timeout","allOptions","document","cookie","split","c","filter","startsWith","slice","pop","Authorization","fetchPromise","fetch","timeoutPromise","Promise","unused","reject","setTimeout","race","attempt","consoleFetchCommon","text","isPlainText","JSON","parse","Accept","consoleFetchSendJSON","body","stringify","delete","post","put","patch","deepForOwn","predicate","valueCallback","visitValue","container","$$typeof","isPlainNonReactObject","Array","isArray","forEach","arrayElement","index","toString","settleAllPromises","promises","results","allSettled","r","overrideSharedModules","override","react","pluginMap","Map","initConsolePlugins","pluginStore","reduxStore","loadPluginEntry","overrideSharedModulesCallback","resolveEncodedCodeRefsCallback","has","pluginData","entryCallbackFired","manifest","setDynamicPluginEnabled","addDynamicPlugin","getPluginEntryCallback","registerPluginEntryCallback","createThunkMiddleware","extraArgument","dispatch","getState","next","action","thunk","withExtraArgument","baseReducers","freeze","FLAGS","state","payload","flag","composeEnhancers","compose","cachedStore","store","createStore","combineReducers","applyMiddleware","activePlugins","dynamicPluginNames","allPluginNames","consolePlugins","disabledPlugins","all","params","URLSearchParams","location","search","k","v","entries","getURLSearchParams","disabledPluginNames","pluginName","getEnabledDynamicPluginNames","subscriptionServiceInitialized","extensionSubscriptions","dynamicPluginListeners","onExtensionSubscriptionAdded","onDynamicPluginListenerAdded","initSubscriptionService","getAllExtensions","getAllFlags","invokeExtensionListener","sub","currentExtensions","currentFlags","extensionsInUse","tg","listenerLastArgs","listener","getDynamicPluginInfo","lastExtensions","lastFlags","invokeAllExtensionListeners","nextExtensions","nextFlags","lastPluginEntries","invokeAllDynamicPluginListeners","nextPluginEntries","subscribe","subscribeToExtensions","subList","invokeListener","isSubscribed","splice","isTranslatableString","endsWith","useExtensions","isMountedRef","unsubscribeRef","extensionsInUseRef","latestTypeGuardsRef","t","trySubscribe","current","translateExtension","tryUnsubscribe","sanitizeExtension","flags","required","disallowed","augmentExtension","assign","uid","isExtensionInUse","every","f","PluginStore","staticPlugins","allowedDynamicPluginNames","dynamicPluginExtensions","loadedDynamicPlugins","failedDynamicPluginNames","Set","listeners","staticPluginExtensions","p","getAllowedDynamicPluginNames","from","invokeListeners","warn","set","processedExtensions","enabled","log","updateExtensions","values","reduce","acc","plugin","isDynamicPluginLoaded","some","registerFailedDynamicPlugin","add","keys","metadata","getStateForTestPurposes","registry","middleware","errorDescriptionKey"],"sourceRoot":""}