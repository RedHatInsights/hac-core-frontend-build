{"version":3,"file":"js/4692.1666360895765.76a9ca88668245bf7dfa.js","mappings":"sHAOO,MAAMA,EAAqC,CAAOC,EAAQC,KAAY,O,OAAD,E,OAAA,E,EAAA,Y,MAC1E,IACE,MAAMC,QAAiBC,MAAM,GAAGH,EAAS,QAAU,WAAWC,kBAE9D,KADmD,QAApC,EAAAC,EAASE,QAAQC,IAAI,uBAAe,eAAEC,SAAS,qBAE5D,MAAM,IAAIC,MAAM,qDAElB,aAAaL,EAASM,OACtB,MAAOC,GAGP,OADAC,QAAQC,MAAM,8BAA+BF,GACtC,K,YAXiE,K,6pBCH5E,MAAMG,EAAwD,CAC5D,sCAAuC,IAAY,OAAD,6BAAC,UAAM,EAAQ,UACjE,gCAAiC,IAAY,OAAD,6BAAC,UAAM,EAAQ,UAC3D,yBAA0B,IAAY,OAAD,6BAAC,UAAM,EAAQ,UACpD,0BAA2B,IAAY,OAAD,6BAAC,UAAM,EAAQ,UACrDC,MAAO,IAAY,OAAD,6BAAC,UAAM,EAAQ,UACjCC,MAAO,IAAY,OAAD,6BAAC,UAAM,EAAQ,UACjC,eAAgB,IAAY,OAAD,6BAAC,UAAM,EAAQ,UAC1C,gBAAiB,IAAY,OAAD,6BAAC,UAAM,EAAQ,UAC3C,uBAAwB,IAAY,OAAD,6BAAC,UAAM,EAAQ,UAClD,cAAe,IAAY,OAAD,6BAAC,UAAM,EAAQ,SACzC,eAAgB,IAAY,OAAD,6BAAC,UAAM,EAAQ,UAC1C,mBAAoB,IAAY,OAAD,6BAAC,UAAM,EAAQ,WAG1CC,EAAcC,OAAOC,KAAKL,GAASM,QACvC,CAACC,EAAKC,IAAmB,OAAD,wBACnBD,GAAG,CACN,CAACC,GAAgB,CAGf,IAAK,CACHf,IAAKO,EAAQQ,GAEbC,QAAQ,OAId,IAGWC,EAAc,KACzB,MAIMC,EAAe,IAAI,EAAAC,aAAa,CAAEC,UAJY,CAACC,EAAKC,IACjDxB,MAAMuB,EAAKC,GAG+BZ,YAAAA,IACnDQ,EAAaK,8BACb,MAAMC,EAAc,IAAI,EAAAC,YAQxB,OAPAD,EAAYE,UAAUR,IACtB,OAAiBS,OAAOC,SAASC,OAAOlC,SAAU,QAA8BmC,MAAMC,IACpFA,EAAKC,SAAQ,EAAGC,KAAMC,EAAMC,WAAAA,EAAa,mBACvC,MAAMd,EAAM,QAAQc,KAAcD,KAClCV,EAAYY,WAAWf,SAGpBG,GAEIA,EAAcP,K","sources":["webpack:///./src/Utils/plugins.ts","webpack:///./src/sdk/createStore.ts"],"sourcesContent":["export type PluginType = {\n  name: string;\n  pathPrefix?: string;\n};\n\ntype GetActivePlugins = (isBeta: boolean, appName: string) => Promise<PluginType[]>;\n\nexport const getActivePlugins: GetActivePlugins = async (isBeta, appName) => {\n  try {\n    const response = await fetch(`${isBeta ? '/beta' : ''}/apps/${appName}/plugins.json`);\n    const isJson = response.headers.get('content-type')?.includes('application/json');\n    if (!isJson) {\n      throw new Error('plugin data response is not type application/json');\n    }\n    return await response.json();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Failed to fetch plugin data', e);\n    return [];\n  }\n};\n","import { getActivePlugins } from '../Utils/plugins';\nimport packageInfo from '../../package.json';\nimport { PluginLoader, PluginLoaderOptions, PluginStore } from '@openshift/dynamic-plugin-sdk';\n\nconst modules: { [name: string]: () => Promise<() => any> } = {\n  '@openshift/dynamic-plugin-sdk-utils': async () => () => require('@openshift/dynamic-plugin-sdk-utils'),\n  '@openshift/dynamic-plugin-sdk': async () => () => require('@openshift/dynamic-plugin-sdk'),\n  '@patternfly/react-core': async () => () => require('@patternfly/react-core'),\n  '@patternfly/react-table': async () => () => require('@patternfly/react-table'),\n  react: async () => () => require('react'),\n  redux: async () => () => require('redux'),\n  'react-helmet': async () => () => require('react-helmet'),\n  'react-i18next': async () => () => require('react-i18next'),\n  '@scalprum/react-core': async () => () => require('@scalprum/react-core'),\n  'react-redux': async () => () => require('react-redux'),\n  'react-router': async () => () => require('react-router'),\n  'react-router-dom': async () => () => require('react-router-dom'),\n};\n\nconst sharedScope = Object.keys(modules).reduce(\n  (acc, moduleRequest) => ({\n    ...acc,\n    [moduleRequest]: {\n      // The '*' semver range means \"this shared module matches all requested versions\",\n      // i.e. make sure the plugin always uses the Console-provided shared module version\n      '*': {\n        get: modules[moduleRequest],\n        // Indicates that Console has already loaded the shared module\n        loaded: true,\n      },\n    },\n  }),\n  {},\n);\n\nexport const createStore = () => {\n  const fetchImpl: PluginLoaderOptions['fetchImpl'] = (url, requestInit) => {\n    return fetch(url, requestInit);\n  };\n\n  const pluginLoader = new PluginLoader({ fetchImpl, sharedScope });\n  pluginLoader.registerPluginEntryCallback();\n  const pluginStore = new PluginStore();\n  pluginStore.setLoader(pluginLoader);\n  getActivePlugins(window.insights.chrome.isBeta(), packageInfo.insights.appname).then((data) => {\n    data.forEach(({ name: item, pathPrefix = '/api/plugins' }) => {\n      const url = `/beta${pathPrefix}/${item}/`;\n      pluginStore.loadPlugin(url);\n    });\n  });\n  return pluginStore;\n};\nexport const pluginStore = createStore();\n"],"names":["getActivePlugins","isBeta","appName","response","fetch","headers","get","includes","Error","json","e","console","error","modules","react","redux","sharedScope","Object","keys","reduce","acc","moduleRequest","loaded","createStore","pluginLoader","PluginLoader","fetchImpl","url","requestInit","registerPluginEntryCallback","pluginStore","PluginStore","setLoader","window","insights","chrome","then","data","forEach","name","item","pathPrefix","loadPlugin"],"sourceRoot":""}