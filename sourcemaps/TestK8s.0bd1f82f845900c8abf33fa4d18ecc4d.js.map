{"version":3,"file":"js/TestK8s.1656093403759.1bd4560113193367c848.js","mappings":"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","sources":["webpack:///./src/Routes/testK8s/PrintObject.tsx","webpack:///./src/Routes/testK8s/WSLoadingState.tsx","webpack:///./src/Routes/testK8s/models.ts","webpack:///./src/Routes/testK8s/WSTest.tsx","webpack:///./src/Routes/testK8s/FetchTest.tsx","webpack:///./src/Routes/testK8s/DetermineNamespace.tsx","webpack:///./src/Routes/testK8s/HookTest.tsx","webpack:///./src/Routes/testK8s/TestK8s.tsx"],"sourcesContent":["import * as React from 'react';\nimport { K8sResourceCommon } from '@openshift/dynamic-plugin-sdk-utils';\n\ntype PrintObjectProps = {\n  object: K8sResourceCommon;\n};\n\nconst PrintObject: React.FC<PrintObjectProps> = ({ object }) => {\n  const [expanded, setExpanded] = React.useState(false);\n\n  const sanitize = (resourceOrResourceList) => {\n    if (Array.isArray(resourceOrResourceList)) {\n      return resourceOrResourceList.map(sanitize);\n    }\n\n    const {\n      apiVersion,\n      kind,\n      apiGroup,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      metadata: { managedFields, ...metadata }, // drop managedFields\n      ...resource\n    } = resourceOrResourceList;\n\n    return {\n      apiVersion,\n      kind,\n      apiGroup,\n      metadata,\n      ...resource,\n    };\n  };\n\n  if (!object) {\n    return <div>No Object to Report</div>;\n  }\n\n  return (\n    <pre style={{ overflow: 'hidden', maxHeight: expanded ? undefined : 150, position: 'relative', paddingTop: 25 }}>\n      {JSON.stringify(sanitize(object), null, 2)}\n      {expanded ? (\n        <div onClick={() => setExpanded(false)} style={{ cursor: 'pointer', top: 0, width: '100%', position: 'absolute', textAlign: 'center' }}>\n          (Click to collapse)\n        </div>\n      ) : (\n        <div\n          onClick={() => setExpanded(true)}\n          style={{\n            cursor: 'pointer',\n            background: 'linear-gradient(transparent, gray)',\n            bottom: 0,\n            width: '100%',\n            height: '100%',\n            position: 'absolute',\n            textAlign: 'center',\n          }}\n        >\n          (Click to expand)\n        </div>\n      )}\n    </pre>\n  );\n};\n\nexport default PrintObject;\n","import * as React from 'react';\nimport { Spinner } from '@patternfly/react-core';\n\ntype WSLoadingStateProps = {\n  socketBeingCreated: boolean;\n  socketOpen: boolean;\n  resourceLoaded: boolean;\n};\n\nconst WSLoadingState: React.FC<WSLoadingStateProps> = ({ socketBeingCreated, socketOpen, resourceLoaded }) => {\n  if (!socketBeingCreated) {\n    return null;\n  }\n  if (socketOpen) {\n    if (resourceLoaded) {\n      return null;\n    }\n\n    return <p>Socket Open.</p>;\n  }\n\n  return <Spinner />;\n};\n\nexport default WSLoadingState;\n","import { K8sModelCommon } from '@openshift/dynamic-plugin-sdk-utils';\n\nexport const ProjectModel: K8sModelCommon = {\n  apiVersion: 'v1',\n  apiGroup: 'project.openshift.io',\n  kind: 'Project',\n  plural: 'projects',\n};\n\nexport const ApplicationModel: K8sModelCommon = {\n  apiVersion: 'v1alpha1',\n  kind: 'Application',\n  apiGroup: 'appstudio.redhat.com',\n  plural: 'applications',\n};\n","/* eslint-disable no-console */\nimport * as React from 'react';\nimport { getK8sResourceURL, WebSocketFactory } from '@openshift/dynamic-plugin-sdk-utils';\nimport PrintObject from './PrintObject';\nimport { Alert, Button, Title } from '@patternfly/react-core';\nimport WSLoadingState from './WSLoadingState';\nimport { ApplicationModel } from './models';\n\ntype WSTestProps = {\n  namespace: string;\n};\n\nconst WSTest: React.FC<WSTestProps> = ({ namespace }) => {\n  const [r, setR] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [isOpen, setOpen] = React.useState(false);\n  const [path, setPath] = React.useState<string>();\n\n  React.useEffect(() => {\n    let ws: WebSocketFactory;\n    if (path) {\n      let safePath = path;\n      if (/^\\/\\//.test(path)) {\n        // https://github.com/openshift/dynamic-plugin-sdk/pull/55\n        safePath = path.slice(1);\n      }\n      ws = new WebSocketFactory('sample websocket', {\n        path: safePath,\n      });\n      ws.onOpen(() => {\n        setOpen(true);\n      });\n      ws.onError((data) => {\n        console.debug('error', data);\n      });\n      ws.onMessage((dataStringOrObject) => {\n        try {\n          let data;\n          if (typeof dataStringOrObject === 'string') {\n            data = JSON.parse(dataStringOrObject);\n          } else {\n            data = dataStringOrObject;\n          }\n          const { type, object } = data || {}; // current structure\n          switch (type) {\n            case 'DELETED':\n              setR(null);\n              break;\n            default:\n              setR(object);\n          }\n          console.debug('message', type, object);\n        } catch (e) {\n          console.error('>>> Web Socket Data Bad', e);\n          setError('Web Socket data unknown structure');\n          return;\n        }\n      });\n      ws.onClose((data) => {\n        setOpen(false);\n        setR(null);\n        setPath(undefined);\n        // https://www.rfc-editor.org/rfc/rfc6455#section-11.7\n        // 1006: https://stackoverflow.com/a/19305172\n        console.debug('close', data, 'code:', data.code);\n      });\n    }\n\n    return () => {\n      ws?.destroy();\n      ws = null;\n    };\n  }, [path]);\n\n  return (\n    <>\n      <Title headingLevel=\"h2\" size=\"xl\">\n        Websockets\n      </Title>\n      <p>Needs a created Application to successfully return details.</p>\n      {!path &&\n        (namespace ? (\n          <>\n            <p>Create Web Socket Connection to:</p>\n            <Button\n              onClick={() => {\n                setPath(getK8sResourceURL(ApplicationModel, undefined, { ns: namespace }));\n              }}\n              variant=\"primary\"\n            >\n              Applications\n            </Button>\n          </>\n        ) : (\n          <p>Need a namespace</p>\n        ))}\n      <WSLoadingState socketBeingCreated={!!path} socketOpen={isOpen} resourceLoaded={!!r} />\n      {isOpen && !r && <p>No response -- did you create the Application?</p>}\n      {error && (\n        <Alert variant=\"danger\" title=\"Websocket Error\">\n          {error}\n        </Alert>\n      )}\n      {r && <PrintObject object={r} />}\n    </>\n  );\n};\n\nexport default WSTest;\n","/* eslint-disable no-console */\nimport * as React from 'react';\nimport { Button, TextInput, Title } from '@patternfly/react-core';\nimport {\n  k8sCreateResource,\n  k8sDeleteResource,\n  k8sGetResource,\n  k8sPatchResource,\n  K8sResourceCommon,\n  k8sUpdateResource,\n} from '@openshift/dynamic-plugin-sdk-utils';\nimport { ApplicationModel } from './models';\n\nimport PrintObject from './PrintObject';\n\n// eslint-disable-next-line no-shadow\nenum ActionType {\n  CREATE = 'create',\n  GET = 'get',\n  PATCH = 'patch',\n  PUT = 'put',\n  DELETE = 'delete',\n}\n\ntype FetchTestProps = {\n  namespace: string;\n};\n\nconst FetchTest: React.FC<FetchTestProps> = ({ namespace }) => {\n  const [r, setR] = React.useState(null);\n  const [name, setName] = React.useState<string>('test');\n  const [status, setStatus] = React.useState<string>('');\n  const [action, setAction] = React.useState<ActionType | null>(null);\n  const [resourceVersion, setResourceVersion] = React.useState<string>(null);\n\n  React.useEffect(() => {\n    const testApplicationMetadata = {\n      name,\n      ns: namespace,\n    };\n    const testApplicationData: K8sResourceCommon & { [key: string]: any } = {\n      apiVersion: `${ApplicationModel.apiGroup}/${ApplicationModel.apiVersion}`,\n      kind: ApplicationModel.kind,\n      metadata: {\n        name,\n        namespace,\n      },\n    };\n\n    let promise = null;\n    switch (action) {\n      case ActionType.CREATE:\n        promise = k8sCreateResource({\n          model: ApplicationModel,\n          queryOptions: testApplicationMetadata,\n          resource: testApplicationData,\n        });\n        break;\n      case ActionType.GET:\n        promise = k8sGetResource({\n          model: ApplicationModel,\n          queryOptions: testApplicationMetadata,\n        }).then((data) => {\n          setResourceVersion(data?.metadata?.resourceVersion);\n          return data;\n        });\n        break;\n      case ActionType.PATCH:\n        promise = k8sPatchResource({\n          model: ApplicationModel,\n          queryOptions: testApplicationMetadata,\n          patches: [\n            {\n              op: 'replace',\n              path: '/test',\n              value: 'false',\n            },\n          ],\n        });\n        break;\n      case ActionType.PUT:\n        promise = k8sUpdateResource({\n          model: ApplicationModel,\n          queryOptions: testApplicationMetadata,\n          resource: {\n            ...testApplicationData,\n            metadata: {\n              ...testApplicationData.metadata,\n              resourceVersion,\n            },\n          },\n        }).then((data) => {\n          setResourceVersion(data?.metadata?.resourceVersion);\n          return data;\n        });\n        break;\n      case ActionType.DELETE:\n        promise = k8sDeleteResource({\n          model: ApplicationModel,\n          queryOptions: testApplicationMetadata,\n        });\n        break;\n      case null:\n        // ignore effect\n        break;\n      default:\n        // this shouldn't happen, catch state for missed cases\n        throw new Error('uh oh!');\n    }\n    promise\n      ?.then((data) => {\n        setStatus(`${action} response:`);\n        setR(data);\n        console.debug(`++++${action}!`, data);\n      })\n      .catch((err) => {\n        console.error(`++++failed ${action}`, err);\n        setStatus(`failed call: ${err.message}`);\n        setR(null);\n      })\n      .finally(() => {\n        setAction(null); // prevent the hook for re-firing on name change\n      });\n  }, [action, name, namespace, resourceVersion]);\n\n  return (\n    <>\n      <Title headingLevel=\"h2\" size=\"xl\">\n        Fetch Calls\n      </Title>\n      <TextInput placeholder=\"Application name\" onChange={(v) => setName(v)} value={name} />\n      <div>\n        <p>Test calls -- predefined data; use the above input to make/update/get multiple Applications</p>\n        {Object.values(ActionType).map((v) => (\n          <React.Fragment key={v}>\n            <Button isDisabled={v === ActionType.PUT && resourceVersion === null} onClick={() => setAction(v)}>\n              {v}\n            </Button>{' '}\n          </React.Fragment>\n        ))}\n      </div>\n      <div>{status}</div>\n      {r && <PrintObject object={r} />}\n    </>\n  );\n};\n\nexport default FetchTest;\n","import * as React from 'react';\nimport { isUtilsConfigSet, k8sListResourceItems } from '@openshift/dynamic-plugin-sdk-utils';\nimport { ProjectModel } from './models';\nimport { Alert, Spinner } from '@patternfly/react-core';\n\ntype DetermineNamespaceProps = {\n  namespace: string;\n  setNamespace: (namespace: string) => void;\n};\n\nconst DetermineNamespace: React.FC<DetermineNamespaceProps> = ({ namespace, setNamespace }) => {\n  const [error, setError] = React.useState<string>(null);\n\n  const hasConfig = isUtilsConfigSet();\n  React.useEffect(() => {\n    if (hasConfig) {\n      k8sListResourceItems({\n        model: ProjectModel,\n      })\n        .then((items) => {\n          const ns = items[0]?.metadata.name;\n\n          if (ns) {\n            setNamespace(ns);\n          } else {\n            setError('Could not find namespace; you are likely not able to do much as we are targeting \"default\"');\n          }\n        })\n        .catch((e) => {\n          setError(`Unknown issue loading namespace ${e?.message}`);\n        });\n    }\n  }, [hasConfig, setNamespace]);\n\n  if (error) {\n    return (\n      <Alert variant=\"danger\" isInline title=\"Determining Namespace Error\">\n        {error}\n      </Alert>\n    );\n  }\n\n  return namespace ? (\n    <p>Current namespace: {namespace}</p>\n  ) : (\n    <>\n      <Spinner /> Loading Namespace\n    </>\n  );\n};\n\nexport default DetermineNamespace;\n","/* eslint-disable no-console */\nimport * as React from 'react';\nimport { Title, TextInput, TextContent, Text, TextVariants } from '@patternfly/react-core';\nimport { useK8sWatchResource, useK8sWatchResources } from '@openshift/dynamic-plugin-sdk-utils';\n\n/* This component is currently used to verify the useK8sWatchResource hook. */\n\ntype HookTestProps = {\n  namespace: string;\n};\n\nconst HookTest: React.FC<HookTestProps> = ({ namespace }) => {\n  const [name, setName] = React.useState<string>('test');\n\n  // Resource to test the useK8sWatchResource hook\n  const watchedResource = {\n    isList: false,\n    groupVersionKind: {\n      group: 'appstudio.redhat.com',\n      version: 'v1alpha1',\n      kind: 'Application',\n    },\n    name,\n    namespace,\n  };\n\n  // Resource to test the useK8sWatchResources hook\n  const watchedResources = {\n    application: {\n      isList: false,\n      groupVersionKind: {\n        group: 'appstudio.redhat.com',\n        version: 'v1alpha1',\n        kind: 'Application',\n      },\n      name,\n      namespace,\n    },\n  };\n\n  const [data, loaded, error] = useK8sWatchResource(watchedResource);\n  const isResourceLoaded = loaded || !!error;\n  if (isResourceLoaded) {\n    console.log('data from useK8sWatchResource: ', data);\n  }\n\n  const { application } = useK8sWatchResources(watchedResources);\n  const isAppResourceLoaded = application.loaded || !!application.loadError;\n  const { data: appResourceData } = application;\n  if (isAppResourceLoaded) {\n    console.log('data from useK8sWatchResources: ', appResourceData);\n  }\n\n  return (\n    <>\n      <Title headingLevel=\"h2\" size=\"xl\">\n        Test hooks to watch Application\n      </Title>\n      <TextInput placeholder=\"Application name\" onChange={(v) => setName(v)} value={name} />\n      <TextContent>\n        <Text component={TextVariants.h4}>useK8sWatchResource (watch Application: {name})</Text>\n        {!isResourceLoaded && <Text component={TextVariants.p}>Loading resource...</Text>}\n        {isResourceLoaded && data && <Text component={TextVariants.p}>Resource loaded</Text>}\n        {isResourceLoaded && !data && <Text component={TextVariants.p}>No data -- did you create the Application?</Text>}\n      </TextContent>\n      <br />\n      <TextContent>\n        <Text component={TextVariants.h4}>useK8sWatchResources (watch Application: {name})</Text>\n        {!isAppResourceLoaded && <Text component={TextVariants.p}>Loading resource...</Text>}\n        {isAppResourceLoaded && appResourceData && <Text component={TextVariants.p}>Resource loaded</Text>}\n        {isAppResourceLoaded && !appResourceData && <Text component={TextVariants.p}>No data -- did you create the Application?</Text>}\n      </TextContent>\n    </>\n  );\n};\n\nexport default HookTest;\n","/* eslint-disable no-console */\nimport * as React from 'react';\nimport { PageSection } from '@patternfly/react-core';\nimport WSTest from './WSTest';\nimport FetchTest from './FetchTest';\nimport DetermineNamespace from './DetermineNamespace';\nimport HookTest from './HookTest';\n\nconst TestK8s: React.FC = () => {\n  const [namespace, setNamespace] = React.useState<string>();\n\n  return (\n    <PageSection>\n      <DetermineNamespace namespace={namespace} setNamespace={setNamespace} />\n      {namespace && (\n        <>\n          <hr style={{ margin: 20 }} />\n          <FetchTest namespace={namespace} />\n          <hr style={{ margin: 20 }} />\n          <HookTest namespace={namespace} />\n          <hr style={{ margin: 20 }} />\n          <WSTest namespace={namespace} />\n        </>\n      )}\n    </PageSection>\n  );\n};\n\nexport default TestK8s;\n"],"names":["object","expanded","setExpanded","sanitize","resourceOrResourceList","Array","isArray","map","apiVersion","kind","apiGroup","managedFields","metadata","resource","style","overflow","maxHeight","undefined","position","paddingTop","JSON","stringify","onClick","cursor","top","width","textAlign","background","bottom","height","socketBeingCreated","socketOpen","resourceLoaded","Spinner","ProjectModel","plural","ApplicationModel","namespace","r","setR","error","setError","isOpen","setOpen","path","setPath","ws","safePath","test","slice","WebSocketFactory","onOpen","onError","data","console","debug","onMessage","dataStringOrObject","parse","type","e","onClose","code","destroy","Title","headingLevel","size","Button","getK8sResourceURL","ns","variant","Alert","title","ActionType","name","setName","status","setStatus","action","setAction","resourceVersion","setResourceVersion","testApplicationMetadata","testApplicationData","promise","CREATE","k8sCreateResource","model","queryOptions","GET","k8sGetResource","then","PATCH","k8sPatchResource","patches","op","value","PUT","k8sUpdateResource","DELETE","k8sDeleteResource","Error","catch","err","message","finally","TextInput","placeholder","onChange","v","Object","values","key","isDisabled","setNamespace","hasConfig","isUtilsConfigSet","k8sListResourceItems","items","isInline","watchedResource","isList","groupVersionKind","group","version","watchedResources","application","loaded","useK8sWatchResource","isResourceLoaded","log","useK8sWatchResources","isAppResourceLoaded","loadError","appResourceData","TextContent","Text","component","TextVariants","PageSection","margin"],"sourceRoot":""}