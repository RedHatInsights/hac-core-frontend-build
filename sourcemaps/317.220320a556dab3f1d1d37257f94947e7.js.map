{"version":3,"file":"js/317.8a8e501ae4f6ff74f932.js","mappings":"wSAgBA,MAkDA,EAlDiB,KACf,MAAM,OAAEA,EAAM,KAAEC,IAAS,UAClBC,EAASC,GAAc,WAA6B,KACpDC,EAAOC,GAAY,aA+B1B,OA9BA,aAAgB,UACCC,IAAXN,IACF,OAAiBA,IAAU,QAA8BO,MAAMC,IAC7DL,EAAWK,GACXC,OAAOC,aAAe,CACpBC,eAAgBH,EAAKI,KAAI,EAAGC,KAAAA,KAAWA,UAI5C,CAACb,IAEJ,aAAgB,KACdC,EAAKa,WAAWP,MAAMQ,IACpBV,EAASU,QAEV,CAACd,IAEJ,aAAgB,KACVG,KAAU,IAAAY,sBACZ,IAAAC,gBAAe,CACbC,UAAU,OAAYd,GACtBe,cAAe,CACbC,KAAM,uFACNC,cAAc,OAAuBjB,GACrCkB,WAAaC,GAAQ,GAAGA,oBAI7B,CAACnB,IAGF,gBAAC,KAAQ,CAACoB,OAAO,SAAK,GAAiDC,YACrE,gBAAC,gBAAM,CAACC,UAAU,QAAYjB,OAAOkB,SAASC,SAAU,IACrD1B,EAAQ2B,OAAS,EAChB,gBAAC,WAAc,KACb,gBAAC,IAAc,CAACC,eAAgB5B,EAAS6B,MAAM/B,MAAAA,OAAM,EAANA,KAAa,QAAU,KACtE,gBAAC,IAAG,OAGN,gBAAC,IAAM","sources":["webpack:///./src/AppEntry.tsx"],"sourcesContent":["import * as React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\nimport { IncludePlugins } from '@console/mount/src/components/plugins';\nimport { getActivePlugins, PluginType } from './Utils/plugins';\nimport Loader from './Utils/Loader';\nimport packageInfo from '../package.json';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { setUtilsConfig, isUtilsConfigSet } from '@openshift/dynamic-plugin-sdk-utils';\nimport { commonFetch } from './Utils/commonFetch';\nimport { getWSTokenSubProtocols } from './Utils/wsConfigs';\n\nconst AppEntry = () => {\n  const { isBeta, auth } = useChrome();\n  const [plugins, setPlugins] = React.useState<PluginType[]>([]);\n  const [token, setToken] = React.useState<string>();\n  React.useEffect(() => {\n    if (isBeta !== undefined) {\n      getActivePlugins(isBeta(), packageInfo.insights.appname).then((data) => {\n        setPlugins(data);\n        window.SERVER_FLAGS = {\n          consolePlugins: data.map(({ name }) => name),\n        };\n      });\n    }\n  }, [isBeta]);\n\n  React.useEffect(() => {\n    auth.getToken().then((t: string) => {\n      setToken(t);\n    });\n  }, [auth]);\n\n  React.useEffect(() => {\n    if (token && !isUtilsConfigSet()) {\n      setUtilsConfig({\n        appFetch: commonFetch(token),\n        wsAppSettings: {\n          host: K8S_WS_TARGET_URL,\n          subProtocols: getWSTokenSubProtocols(token),\n          urlAugment: (url) => `${url}?watch=true`,\n        },\n      });\n    }\n  }, [token]);\n\n  return (\n    <Provider store={init(process.env.NODE_ENV !== 'production' && logger).getStore()}>\n      <Router basename={getBaseName(window.location.pathname, 1)}>\n        {plugins.length > 0 ? (\n          <React.Fragment>\n            <IncludePlugins enabledPlugins={plugins} base={isBeta?.() ? '/beta' : ''} />\n            <App />\n          </React.Fragment>\n        ) : (\n          <Loader />\n        )}\n      </Router>\n    </Provider>\n  );\n};\n\nexport default AppEntry;\n"],"names":["isBeta","auth","plugins","setPlugins","token","setToken","undefined","then","data","window","SERVER_FLAGS","consolePlugins","map","name","getToken","t","isUtilsConfigSet","setUtilsConfig","appFetch","wsAppSettings","host","subProtocols","urlAugment","url","store","getStore","basename","location","pathname","length","enabledPlugins","base"],"sourceRoot":""}