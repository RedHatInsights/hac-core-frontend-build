{"version":3,"file":"js/1209.1657833347764.6ae0d75d5905ea06655c.js","mappings":"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","sources":["webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/useChrome/useChrome.js","webpack:///./src/Navigation.ts","webpack:///./src/Utils/plugins.ts"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useScalprum } from '@scalprum/react-core';\nvar useChrome = function (selector) {\n    var _a;\n    var state = useScalprum();\n    var chrome = ((_a = state.api) === null || _a === void 0 ? void 0 : _a.chrome) || {};\n    chrome = __assign(__assign({}, chrome), { initialized: state.initialized });\n    if (typeof selector === 'function') {\n        return selector(chrome);\n    }\n    return chrome;\n};\nexport default useChrome;\n//# sourceMappingURL=useChrome.js.map","import * as React from 'react';\nimport { getActivePlugins } from './Utils/plugins';\nimport { HrefNavItem, PluginManifest, Extension, NavSection, isNavSection } from '@openshift/dynamic-plugin-sdk';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport packageInfo from '../package.json';\n\nexport type EnabledPlugin = {\n  name: string;\n  pathPrefix?: string;\n};\n\nexport interface RouteProps {\n  isHidden?: boolean;\n  appId?: string;\n  href?: string;\n  title?: string;\n}\n\nexport interface DynamicNav {\n  dynamicNav: string;\n  currentNamespace: string;\n  base?: string;\n  isBeta?: () => boolean;\n}\n\nconst navExtensionTypes = ['console.navigation/href', 'console.navigation/section', 'core.navigation/href', 'core.navigation/section'];\ntype NavExtension = HrefNavItem | NavSection;\n\nexport type GetAllExtensions = (base?: string, isBeta?: () => boolean) => Promise<NavExtension[]>;\nexport type CalculateRoutes = (navIdentifier: [string, string], currentNamespace: string, extensions: (HrefNavItem | NavSection)[]) => RouteProps[];\nexport type Navigation = {\n  expandable: boolean;\n  title: string;\n  routes: RouteProps[];\n};\n\nconst isFulfilledPromise = (result: PromiseSettledResult<Extension[]>): result is PromiseFulfilledResult<Extension[]> => {\n  return result.status === 'fulfilled' && Boolean(result.value);\n};\n\nconst isNavItem = (extension: Extension): extension is NavExtension => {\n  return navExtensionTypes.includes(extension.type);\n};\n\nconst getAllExtensions: GetAllExtensions = async (base = '', isBeta = () => false) => {\n  const plugins = await getActivePlugins(isBeta(), packageInfo.insights.appname);\n  const results: PromiseSettledResult<Extension[]>[] = await Promise.allSettled(\n    plugins.flatMap(async ({ name: pluginName, pathPrefix = '/api/plugins' }: EnabledPlugin) => {\n      const url = `${base}${pathPrefix}/${pluginName}/plugin-manifest.json`;\n      const response: Response = await fetch(url);\n      if (response.status !== 200) {\n        const msg = `${url} - ${response.status} - ${response.statusText}`;\n        // eslint-disable-next-line no-console\n        console.error(msg);\n        throw new Error(msg);\n      }\n      const manifest: PluginManifest = await response.json();\n      return manifest.extensions;\n    }),\n  );\n\n  return results\n    .filter(isFulfilledPromise)\n    .map(({ value }) => value)\n    .flat()\n    .filter(isNavItem);\n};\n\nconst isNavigation = (type) => ['console.navigation/href', 'core.navigation/href'].includes(type);\n\nconst isCurrNavigation = (array, idx, properties) => array.findIndex(({ properties: { href } }: HrefNavItem) => href === properties.href) === idx;\n\nconst calculateRoutes: CalculateRoutes = ([appId, navSection], currentNamespace, extensions) => {\n  return extensions\n    .filter(\n      ({ type, properties }: HrefNavItem, idx, array) =>\n        isNavigation(type) && properties.section === navSection && isCurrNavigation(array, idx, properties),\n    )\n    .map((extension: HrefNavItem) => ({\n      appId,\n      href: `/${currentNamespace}${navSection ? `/${navSection}` : ''}${extension.properties.href}`,\n      title: extension.properties.name,\n    }));\n};\n\nconst calculateNavigation = async ({ dynamicNav, currentNamespace, base, isBeta }: DynamicNav): Promise<Navigation | RouteProps[]> => {\n  const [appId, navSection] = dynamicNav.split('/');\n  let allExtensions: NavExtension[] = [];\n  let routes: RouteProps | RouteProps[];\n  try {\n    allExtensions = await getAllExtensions(base, isBeta);\n    routes = calculateRoutes([appId, navSection], currentNamespace, allExtensions);\n    if (routes.length === 0) {\n      routes = [{ isHidden: true }];\n    }\n  } catch (e) {\n    routes = [{ isHidden: true }];\n    // eslint-disable-next-line no-console\n    console.error('Problem fetching extensions', e);\n  }\n  const { properties: currSection } = allExtensions.find((extension: NavSection) => isNavSection(extension)) || {};\n  return currSection\n    ? {\n        expandable: true,\n        title: currSection.name,\n        routes,\n      }\n    : routes;\n};\n\n/**\n * Hook to be used by chrome to calculate navigation chunks.\n * @param { dynamicNav, currentNamespace }\n *  * dynamicNav - entry idicating dynamic navigation\n *  * currentNamespace - current app namespace\n * @returns either navigation object for nested items or array of navigation object for multiple entries.\n */\nexport const useNavigation = ({ dynamicNav, currentNamespace }: DynamicNav): Navigation | RouteProps[] => {\n  const [navigation, setNavigation] = React.useState<Navigation | RouteProps[]>();\n  const unmounted = React.useRef<boolean>(false);\n  const { isBeta } = useChrome();\n  React.useEffect(() => {\n    if (dynamicNav) {\n      // this is just one off for now, but we can start building on this\n      calculateNavigation({ dynamicNav, currentNamespace, base: isBeta() ? `/beta` : '', isBeta }).then((data: Navigation | RouteProps[]) => {\n        if (!unmounted.current) {\n          setNavigation(data);\n        }\n      });\n    }\n\n    return () => {\n      unmounted.current = true;\n    };\n  }, [dynamicNav, currentNamespace]);\n\n  return navigation;\n};\n\nexport default calculateNavigation;\n","export type PluginType = {\n  name: string;\n  pathPrefix?: string;\n};\n\ntype GetActivePlugins = (isBeta: boolean, appName: string) => Promise<PluginType[]>;\n\nexport const getActivePlugins: GetActivePlugins = async (isBeta, appName) => {\n  try {\n    return (await fetch(`${isBeta ? '/beta' : ''}/apps/${appName}/plugins.json`)).json();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Failed to fetch plugin data', e);\n    return [];\n  }\n};\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","selector","_a","state","useScalprum","chrome","api","initialized","navExtensionTypes","isFulfilledPromise","result","status","Boolean","value","isNavItem","extension","includes","type","calculateNavigation","dynamicNav","currentNamespace","base","isBeta","appId","navSection","split","routes","allExtensions","plugins","Promise","allSettled","flatMap","name","pluginName","pathPrefix","url","response","fetch","msg","statusText","console","error","Error","json","extensions","filter","map","flat","getAllExtensions","properties","idx","array","isNavigation","section","findIndex","href","isCurrNavigation","title","calculateRoutes","isHidden","e","currSection","find","isNavSection","expandable","useNavigation","navigation","setNavigation","unmounted","then","data","current","getActivePlugins","appName"],"sourceRoot":""}