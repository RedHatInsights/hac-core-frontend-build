{"version":3,"file":"js/6647.1656605616678.494e8bdd35836cd01dbe.js","mappings":"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","sources":["webpack:///./config/empty.js","webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/Routes.tsx","webpack:///./src/Utils/Loader.tsx","webpack:///./src/sdk/InitializeSDK.tsx","webpack:///./src/sdk/commonFetch.ts","webpack:///./src/sdk/customError.ts","webpack:///./src/sdk/httpError.ts","webpack:///./src/sdk/useAppConfiguration.ts","webpack:///./src/sdk/wsConfigs.ts","webpack:///./src/store/index.ts"],"sourcesContent":["// Used as an empty module to save bundle size\nmodule.exports = {};\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useStore } from 'react-redux';\nimport { RegistryContext } from './store';\n\nconst App: React.FC = () => {\n  const navigate = useNavigate();\n  const { getRegistry } = React.useContext(RegistryContext);\n\n  const chrome = useChrome();\n  const store = useStore();\n\n  React.useEffect(() => {\n    getRegistry().register({ notifications: notificationsReducer });\n    const { on: onChromeEvent } = chrome?.init();\n\n    const unregister = onChromeEvent('APP_NAVIGATION', (event) => {\n      if (event.domEvent) {\n        navigate(`${event.domEvent.href.replace('/hac', '')}`);\n      }\n    });\n    return () => {\n      unregister();\n    };\n  }, [history, chrome]);\n\n  return (\n    <React.Fragment>\n      <NotificationsPortal store={store} />\n      <Routes />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import * as React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init, RegistryContext } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\nimport { InitializeSDK } from './sdk';\n\nconst AppEntry = () => {\n  const registry = process.env.NODE_ENV !== 'production' ? init(logger) : init();\n  return (\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry,\n      }}\n    >\n      <Provider store={registry.getStore()}>\n        <InitializeSDK>\n          <Router basename={getBaseName(window.location.pathname, 1)}>\n            <App />\n          </Router>\n        </InitializeSDK>\n      </Provider>\n    </RegistryContext.Provider>\n  );\n};\n\nexport default AppEntry;\n","import * as React from 'react';\nimport { Route, Routes as DomRoutes } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst DynamicRoute = React.lazy(() => import(/* webpackChunkName: \"DynamicRoute\" */ './Routes/DynamicRoute/DynamicRoute'));\nconst TestK8s = React.lazy(() => import(/* webpackChunkName: \"TestK8s\" */ './Routes/testK8s/TestK8s'));\n\nexport const Routes: React.FC = () => (\n  <React.Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <DomRoutes>\n      <Route path=\"/*\" element={<DynamicRoute />} />\n      <Route path=\"/testK8s\" element={<TestK8s />} />\n    </DomRoutes>\n  </React.Suspense>\n);\n","import * as React from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst Loader = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n\nexport default Loader;\n","import * as React from 'react';\nimport { AppInitSDK } from '@openshift/dynamic-plugin-sdk-utils';\nimport Loader from '../Utils/Loader';\nimport useAppConfiguration from './useAppConfiguration';\n\nconst InitializeSDK: React.FC = ({ children }) => {\n  const appConfigurations = useAppConfiguration();\n\n  if (!appConfigurations) {\n    return <Loader />;\n  }\n\n  // TODO(SDK): Don't override children\n  // TODO(SDK): AppInitSDK doesn't work with no redux\n  // react_devtools_backend.js:4061 Error: could not find react-redux context value; please ensure the component is wrapped in a <Provider>\n  return <AppInitSDK configurations={appConfigurations}>{children as any}</AppInitSDK>;\n};\n\nexport default InitializeSDK;\n","import { HttpError } from './httpError';\n\nconst k8sBasePath = `/api/k8s`;\n\ntype AuthConfig = {\n  getToken: () => Promise<String>;\n};\n\nexport const validateStatus = async (response: Response) => {\n  if (response.ok) {\n    return response;\n  }\n\n  if (response.status === 401) {\n    throw new HttpError('Invalid token. Are you working with Prod SSO token?', response.status, response);\n  }\n\n  const contentType = response.headers.get('content-type');\n  if (!contentType || contentType.indexOf('json') === -1) {\n    throw new HttpError(response.statusText, response.status, response);\n  }\n\n  if (response.status === 403) {\n    return response.json().then((json) => {\n      throw new HttpError(json.message || 'Access denied due to cluster policy.', response.status, response, json);\n    });\n  }\n\n  return response.json().then((json) => {\n    const cause = json.details?.causes?.[0];\n    let reason;\n    if (cause) {\n      reason = `Error \"${cause.message}\" for field \"${cause.field}\".`;\n    }\n    if (!reason) {\n      reason = json.message;\n    }\n    if (!reason) {\n      reason = json.error;\n    }\n    if (!reason) {\n      reason = response.statusText;\n    }\n\n    throw new HttpError(reason, response.status, response, json);\n  });\n};\n\nexport const commonFetch =\n  (auth: AuthConfig) =>\n  async (url: string, { pathPrefix, ...options }: RequestInit & { pathPrefix?: string }): Promise<Response> => {\n    const token = await auth.getToken();\n    if (!token) {\n      return Promise.reject('Could not make k8s call. Unable to find token.');\n    }\n\n    const allOptions = {\n      ...options,\n      headers: {\n        ...options.headers,\n        Accept: 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    };\n\n    const prefix = `${(pathPrefix ?? k8sBasePath).indexOf('/') === 0 ? '' : '/'}${pathPrefix ?? k8sBasePath}`;\n\n    try {\n      let safeURL = url;\n      if (/^\\/\\//.test(url)) {\n        // https://github.com/openshift/dynamic-plugin-sdk/pull/55\n        safeURL = url.slice(1);\n      }\n      return validateStatus(await fetch(new Request(`${prefix}${safeURL}`, { credentials: 'include' }), allOptions));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n","/**\n * Allows to easily extend a base class to create custom applicative errors.\n *\n * example:\n * ```\n * class HttpError extends CustomError {\n * \tpublic constructor(\n * \t\tpublic code: number,\n * \t\tmessage?: string,\n * \t) {\n * \t\tsuper(message)\n * \t}\n * }\n *\n * new HttpError(404, 'Not found')\n * ```\n */\nexport class CustomError extends Error {\n  name: string;\n\n  constructor(message?: string) {\n    super(message);\n    // set error name as constructor name, make it not enumerable to keep native Error behavior\n    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors\n    Object.defineProperty(this, 'name', {\n      value: new.target.name,\n      enumerable: false,\n      configurable: true,\n    });\n    // Use captureStackTrace when available to remove contructor from stack trace\n    // Add message to the stack trace\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor);\n    } else {\n      this.stack = new Error(message).stack;\n    }\n    // fix the extended error prototype chain\n    // because typescript __extends implementation can't\n    // see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n","import { CustomError } from './customError';\n\n/**\n * Http error\n *\n * Usage: throw HttpError.fromCode(404)\n */\nexport class HttpError extends CustomError {\n  protected static messages = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required', // RFC 7235\n    408: 'Request Timeout',\n    409: 'Conflict',\n    410: 'Gone',\n    411: 'Length Required',\n    412: 'Precondition Failed', // RFC 7232\n    413: 'Payload Too Large', // RFC 7231\n    414: 'URI Too Long', // RFC 7231\n    415: 'Unsupported Media Type',\n    416: 'Range Not Satisfiable', // RFC 7233\n    417: 'Expectation Failed',\n    418: \"I'm a teapot\", // RFC 2324\n    421: 'Misdirected Request', // RFC 7540\n    426: 'Upgrade Required',\n    428: 'Precondition Required', // RFC 6585\n    429: 'Too Many Requests', // RFC 6585\n    431: 'Request Header Fields Too Large', // RFC 6585\n    451: 'Unavailable For Legal Reasons', // RFC 7725\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Gateway Timeout',\n    505: 'HTTP Version Not Supported',\n    506: 'Variant Also Negotiates', // RFC 2295\n    510: 'Not Extended', // RFC 2774\n    511: 'Network Authentication Required', // RFC 6585\n  };\n\n  public constructor(message: string, public code?: number, public response?: Response, public json?: any) {\n    super(message);\n  }\n\n  public static fromCode(code: number) {\n    return new HttpError(HttpError.messages[code], code);\n  }\n}\n\nexport class TimeoutError extends CustomError {\n  public constructor(public url: string, public ms: number) {\n    super(`Call to ${url} timed out after ${ms}ms.`);\n  }\n}\n\nexport class RetryError extends CustomError {}\n","import * as React from 'react';\nimport { commonFetch } from './commonFetch';\nimport { getWSTokenSubProtocols } from './wsConfigs';\nimport { AppInitSDK } from '@openshift/dynamic-plugin-sdk-utils';\nimport { pluginStore } from 'Sdk/createStore';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\ntype AppConfigurations = React.ComponentProps<typeof AppInitSDK>['configurations'];\n\nconst useAppConfiguration = (): AppConfigurations | null => {\n  const { auth } = useChrome();\n  const [appConfigurations, setAppConfigurations] = React.useState<AppConfigurations | null>(null);\n\n  React.useEffect(() => {\n    if (auth && !appConfigurations) {\n      setAppConfigurations({\n        appFetch: commonFetch(auth),\n        wsAppSettings: async () => {\n          const token = await auth.getToken();\n          return {\n            host: `wss://${location.host}/wss/k8s`,\n            subProtocols: getWSTokenSubProtocols(token),\n            urlAugment: (url: string) => {\n              const [origUrl, query] = url.split('?') || [];\n              const queryParams = new URLSearchParams(query);\n              if (!queryParams.get('watch')) {\n                queryParams.set('watch', 'true');\n              }\n              return `${origUrl}?${queryParams.toString()}`;\n            },\n          };\n        },\n        apiPriorityList: ['appstudio.redhat.com'],\n        pluginStore,\n      });\n    }\n  }, [appConfigurations, pluginStore, auth]);\n\n  return appConfigurations;\n};\n\nexport default useAppConfiguration;\n","const base64 = (data: string): string => {\n  return btoa(data).replace(/\\+/g, '-').replace(/\\//g, '_').split('=', 1)[0];\n};\n\nexport const getWSTokenSubProtocols = (token: string): string[] => {\n  const base64Token = base64(token);\n  return [`base64url.bearer.authorization.k8s.io.${base64Token}`, 'base64.binary.k8s.io'];\n};\n","import { createContext } from 'react';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { SDKReducers } from '@openshift/dynamic-plugin-sdk-utils';\nimport thunk from 'redux-thunk';\nimport type { Store } from 'redux';\n\nexport type Registry = {\n  getStore: () => Store;\n  register<TRegister>(toRegister: TRegister): void;\n};\n\nexport type ContextRegistry = {\n  getRegistry: () => Registry;\n};\n\nexport const RegistryContext = createContext<ContextRegistry>(undefined);\n\nlet registry: Registry;\n\nexport function init(...middleware): Registry {\n  registry = getRegistry(\n    {},\n    [thunk, promiseMiddleware, notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }), ...middleware.filter(Boolean)],\n    undefined,\n  );\n  registry.register(SDKReducers);\n  return registry;\n}\n"],"names":["module","exports","navigate","useNavigate","getRegistry","chrome","store","useStore","register","notifications","on","onChromeEvent","init","unregister","event","domEvent","href","replace","history","registry","value","Provider","getStore","basename","window","location","pathname","DynamicRoute","TestK8s","Routes","fallback","Bullseye","Spinner","Route","path","element","children","appConfigurations","AppInitSDK","configurations","k8sBasePath","commonFetch","auth","url","pathPrefix","options","token","getToken","Promise","reject","allOptions","headers","Accept","Authorization","prefix","indexOf","safeURL","test","slice","response","fetch","Request","credentials","ok","status","contentType","get","statusText","json","then","message","cause","details","causes","reason","field","error","e","CustomError","Error","constructor","super","Object","defineProperty","this","name","enumerable","configurable","captureStackTrace","stack","setPrototypeOf","prototype","HttpError","code","static","messages","setAppConfigurations","appFetch","wsAppSettings","host","subProtocols","urlAugment","origUrl","query","split","queryParams","URLSearchParams","set","toString","apiPriorityList","pluginStore","getWSTokenSubProtocols","btoa","RegistryContext","createContext","undefined","middleware","errorDescriptionKey","filter","Boolean","SDKReducers"],"sourceRoot":""}